@page "/companies"
@using Microsoft.EntityFrameworkCore
@using Vendor.Data.Models
@inject IDbContextFactory<VendorDataDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject StateContainer StateContainer

<main class="main">

    <h3 class="mb-4">Companies Registered</h3>

    <PageTitle>Companies Registered</PageTitle>

    @if (Companies is null)
    {
        <div>Loading...</div>
    }
    else
    {


        @*    //
    <ul class="pagination mb-2 mt-4 justify-content-center">
    <li class="page-item  @(CurrentPage == 1 ? "disabled" : "")">
    <a class="page-link" href="/companies/@(CurrentPage - 1)">Previous</a>
    </li>

    @for (int i = 1; i <= TotalPages; i++)
    {
    <li class="page-item @(CurrentPage == i ? "active" : "")">
    <a class="page-link numbers" href="/companies/@i">@i</a>
    </li>
    }

    <li class="page-item  @(CurrentPage == TotalPages ? "disabled" : "")">
    <a class="page-link" href="/companies/@(CurrentPage + 1)">Next</a>
    </li>
    </ul>*@

        @*
    <div>
    <a href="/register" class="fw-bold btn btn-sm btn-primary mb-3">Add Company</a>

    <div class="mb-2">
    <input type="text" @onkeyup="@TextFilterKeyUp" @bind-value="@FilterString" placeholder="Filter Companies..." />
    <button class="btn btn-sm btn-secondary" @onclick="ButtonFilterClick">Filter</button>
    </div>

    </div>*@

        @if (SuccessRemoveMessage is not null)
        {
            <div class="alert alert-success text-al">@SuccessRemoveMessage</div>
        }


        <table class="companies-data table border table table-responsive table-hover" id="table">
            <thead>
                <tr>
                    <th>Companies Registered</th>
                    <th>Disable Notifications</th>
                    @*    <th>Edit Company Info</th>
                <th>Edit Contacts</th>
                <th>Edit Types and Categories</th>*@
                    <th>Edit</th>
@*                    <th>Remove Company</th>
*@                </tr>
            </thead>
            <tbody>
                @foreach (var company in Companies)
                {
                    @if (!company.Is_Deleted)
                    {
                        <tr>
                            <td><button class="btn" style="border:none; background-color: transparent !important;  @(company.Disabled_From_Notifications == true ? "color:#9b9999;" : "") background-color: #f9fafb;" id="company">@company.Name</button></td>

                            @if (company.Disabled_From_Notifications)
                            {
                                <td>
                                    <div class="form-check form-switch justify-content-center">
                                        <input checked @onchange="() => HandleCompanyDisabled(company.Id, company.Disabled_From_Notifications)" class="form-check-input" type="checkbox" id="notifications-switch">
                                        <label style="margin: 0 auto;" class="form-check-label" for="notifications-switch" hidden>Disable Company Notifications</label>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div class="form-check form-switch justify-content-center">
                                        <input @onchange="() => HandleCompanyDisabled(company.Id, company.Disabled_From_Notifications)" class="form-check-input" type="checkbox" id="notifications-switch">
                                        <label style="margin: 0 auto;" class="form-check-label" for="notifications-switch" hidden>Disable Company Notifications</label>
                                    </div>
                                </td>
                            }
                            @*<td><a class="edit-link" href="/edit/companyinfo/@company.Id"><i alt="building icon" class="link-icon-building fa-solid fa-building"></i></a></td>
                <td><a class="edit-link" href="/edit/company-contacts/@company.Id"><i alt="address book icon" class="link-icon-book fa-solid fa-address-book"></i></a></td>
                <td><a class="edit-link" href="/edit/company-types-and-categories/@company.Id"><i alt="briefcase icon" class="link-icon-case fa-solid fa-briefcase"></i></a></td>*@
                            <td>



                                <div class="dropdown" id="toggleDropdown">
                                    <button class="btn btn-sm btn-secondary dropdown-btn" type="button" @onclick="() => HandleDropdown(company.Id)">
                                        <span>Edit Company</span>
                                    </button>

                                    <ul id="@company.Id" style="list-style: none; display: flex; flex-direction:column; padding-left: 0; height: auto;" class="dropdown-list hidden">
                                        <li class="mt-1 mb-1">
                                            <a class="btn btn-sm btn-outline-secondary fw-bold" href="/edit/companyinfo/@company.Id">
                                                Information
                                            </a>
                                        </li>
                                        <li class="mt-1 mb-1">
                                            <a class="btn btn-sm btn-outline-primary fw-bold" href="/edit/company-contacts/@company.Id">
                                                Contacts
                                            </a>
                                        </li>
                                        <li class="mt-1 mb-1">
                                            <a class="btn btn-sm btn-outline-success fw-bold" href="/edit/company-types-and-categories/@company.Id">
                                                Types/Categories
                                            </a>
                                        </li>
                                        <li class="mt-1 mb-1">
                                            <button @onclick="() => HandleCompanyDelete(company.Id)" id="trash" style="height: auto; margin: 5px 0;" class="remove btn btn-sm btn-outline-danger">Remove</button>
                                        </li>
                                    </ul>

                                </div>


                                <div class="dropdown">
                                    <button class="btn btn-primary btn-sm dropdown-toggle text-left" id="actionDropdownButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        Actions
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="actionDropdownButton">

                                        <ul id="@company.Id" style="list-style: none; display: flex; flex-direction:column; padding-left: 0; height: auto;" class="dropdown-list hidden">
                                            <li class="mt-1 mb-1">
                                                <a class="btn btn-sm btn-outline-secondary fw-bold" href="/edit/companyinfo/@company.Id">
                                                    Information
                                                </a>
                                            </li>
                                            <li class="mt-1 mb-1">
                                                <a class="btn btn-sm btn-outline-primary fw-bold" href="/edit/company-contacts/@company.Id">
                                                    Contacts
                                                </a>
                                            </li>
                                            <li class="mt-1 mb-1">
                                                <a class="btn btn-sm btn-outline-success fw-bold" href="/edit/company-types-and-categories/@company.Id">
                                                    Types/Categories
                                                </a>
                                            </li>
                                            <li class="mt-1 mb-1">
                                                <button @onclick="() => HandleCompanyDelete(company.Id)" id="trash" style="height: auto; margin: 5px 0;" class="remove btn btn-sm btn-outline-danger">Remove</button>
                                            </li>
                                        </ul>

                                    </div>
                                </div>

                            </td>
@*                            <td><button @onclick="() => HandleCompanyDelete(company.Id)" id="trash" style="height: auto; margin: 5px 0;" class="remove btn btn-sm btn-danger"><span><i alt="trash icon" id="trash-icon" class="fa-solid fa-trash white"></i></span></button></td>
*@                        </tr>
                    }
                }
            </tbody>
        </table>

        @*<ul class="pagination mb-4 mt-4 justify-content-center">
    <li class="page-item  @(CurrentPage == 1 ? "disabled" : "")">
    <a class="page-link" href="/companies/@(CurrentPage - 1)">Previous</a>
    </li>

    @for (int i = 1; i <= TotalPages; i++)
    {
    <li class="page-item @(CurrentPage == i ? "active" : "")">
    <a class="page-link numbers" href="/companies/@i">@i</a>
    </li>
    }

    <li class="page-item  @(CurrentPage == TotalPages ? "disabled" : "")">
    <a class="page-link" href="/companies/@(CurrentPage + 1)">Next</a>
    </li>
    </ul>*@
    }

    <div class="panel home-panel mb-4 mt-4">
        <div class="layout">
            <h2 class="home-header fs-4 fw-bold title">Home Page</h2>
            <p class="home-description desc">Go back to home page to do various tasks</p>
        </div>
        <span class="house"><i alt="house icon" class="fa-solid fa-house fa-2x"></i></span>
        <a href="/" class="stretched-link"></a>
    </div>

</main>

@code {

    // public class CompanyInfo
    //  {
    //   private VendorDataDbContext _db;
    //  public CompanyInfo(VendorDataDbContext db)
    //    {
    //        _db = db;
    //       }
    //

    private Company[]? Companies { get; set; }
    private List<Company> List { get; set; } = new List<Company>();
    public Company? Company { get; set; }
    [Parameter]
    public int? CurrentPage { get; set; }
    private const int ItemsPerPage = 10;
    private double TotalPages { get; set; }
    private string? FilterString { get; set; }

    private string? SuccessRemoveMessage { get; set; }
    private bool DataTablePresent { get; set; }
    private bool ShowDropdown = false;
    private string SelectedWord = "Edit";


    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();

        Companies = await context.Companies
               .Where(comp => comp.Is_Deleted != true)
           .OrderBy(comp => comp.Name)
           .ToArrayAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }


    //protected override async void OnAfterRender(bool firstRender)
    //{

    //    if (Companies is not null && !DataTablePresent)
    //    {
    //        DataTablePresent = true;
    //        await JS.InvokeAsync<IJSObjectReference>("DataTablesAdd", "#table");
    //    }
    ////    //else if (DataTablePresent && Companies is not null)
    ////    //{
    ////    //    DataTablePresent = false;
    ////    //    await JS.InvokeAsync<IJSObjectReference>("DataTablesRemove", "#table");
    ////    }


    //}



    private async Task LoadData()
    {
        //if (CurrentPage is null or < 1)
        //{
        //    NavigationManager.NavigateTo("/companies/1");
        //    return;
        //}
        using var context = ContextFactory.CreateDbContext();
        //var ItemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        //IQueryable<Company> CompanyCountQuery = context.Companies;
        //CompanyCountQuery = AddFilter(CompanyCountQuery);
        //var CompanyCount = await CompanyCountQuery.Where(comp => comp.Is_Deleted != true).CountAsync();
        //TotalPages = CompanyCount == 0 ? 1 : Math.Ceiling((double)CompanyCount / ItemsPerPage);

        //if (CurrentPage > TotalPages)
        //{
        //    NavigationManager.NavigateTo($"companies/{TotalPages}");
        //    return;
        //}

        //StateContainer.CompanyInfoPage = CurrentPage.Value;

        //IQueryable<Company> CompanyQuery = context.Companies;
        //CompanyQuery = AddFilter(CompanyQuery);
        //Companies = await CompanyQuery
        //.Where(comp => comp.Is_Deleted != true)
        //.OrderBy(comp => comp.Name)
        //.Skip(ItemsToSkip)
        //.Take(ItemsPerPage)
        //.ToArrayAsync();

        Companies = await context.Companies
        .Where(comp => comp.Is_Deleted != true)
    .OrderBy(comp => comp.Name)
    .ToArrayAsync();

        SuccessRemoveMessage = null;
    }

    //private async Task TextFilterKeyUp(KeyboardEventArgs e)
    //{
    //    if (e.Key == "Enter")
    //    {
    //        await LoadData();
    //    }
    //}

    //private async Task ButtonFilterClick()
    //{
    //    await LoadData();
    //}

    //private IQueryable<Company> AddFilter(IQueryable<Company> companyQuery)
    //{
    //    if (!string.IsNullOrWhiteSpace(FilterString))
    //    {
    //        return companyQuery.Where(comp => comp.Name != null && comp.Name.Contains(this.FilterString));
    //    }
    //    return companyQuery;
    //}


    private async Task HandleCompanyDelete(int Id)
    {

        using var context = ContextFactory.CreateDbContext();
        Company = await context.Companies.FirstOrDefaultAsync(comp => comp.Id == Id);

        if (Company is not null)
        {
            var isOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Company {Company.Name}?");

            if (isOk)
            {
                Company.Is_Deleted = true;
                //context.Remove(Company);
                context.Update(Company);
                await context.SaveChangesAsync();
                //await Dispose();
                await LoadData();

                SuccessRemoveMessage = "Company successfully removed!";

            }
        }
    }


    private async Task HandleCompanyDisabled(int Id, bool Disabled)
    {
        using var context = ContextFactory.CreateDbContext();
        Company = await context.Companies.FirstOrDefaultAsync(comp => comp.Id == Id);

        if (Disabled && Company is not null)
        {
            Company.Disabled_From_Notifications = false;
            context.Update(Company);
            await context.SaveChangesAsync();
        }
        else if (!Disabled && Company is not null)
        {
            Company.Disabled_From_Notifications = true;
            context.Update(Company);
            await context.SaveChangesAsync();
        }
        await LoadData();

    }

    //private async Task Dispose()
    //{
    //    DataTablePresent = false;
    //    await JS.InvokeAsync<IJSObjectReference>("DataTablesRemove", "#table");
    //}

    private async Task HandleDropdown(int Id)
    {
        await JS.InvokeAsync<IJSObjectReference>("ToggleDropdown", Id);

    }

}



