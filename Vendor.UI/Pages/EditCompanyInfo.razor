@page "/edit/companyinfo/{CompanyId:int}"
@inject IDbContextFactory<VendorDataDbContext> ContextFactory;
@inject StateContainer StateContainer;
@inject NavigationManager NavigationManager


<div class="main">


    @if (Company == null)
    {
        <div class="mb-3">Loading...</div>
    }
    else
    {
        <h3 class="mt-4 mb-4">Edit/View Company: <strong>@Company.Name</strong></h3>

        <div class="tab-div mb-2">
            <button @onclick="@HandleAccountActive" class="tab1-btn @(AccountActive == true ? "active-page" : "")" type="button">Account</button>
            <button @onclick="@HandleInfoActive" class="tab2-btn btn @(InfoActive == true ? "active-page" : "")" type="button">Company Info</button>
            <button @onclick="@HandleAddressActive" class="tab3-btn btn @(AddressActive == true ? "active-page" : "")" type="button">Address</button>
        </div>


        @if (AccountActive)
        {
            @if (Account == null)
            {
                <div>Loading...</div>
            }
            else
            {
                <div class="create-account-container mb-4">
                    <h3>Account:</h3>
                    <AccountForm OnSubmit="@HandleAccountSubmit" SaveAccountEror="@SaveAccountError" SaveAccountSuccess="@SaveAccountSuccess" IsEdit="true" Account="@Account" />
                </div>
            }
        }
        @if (InfoActive)
        {
            <div class="create-account-container mb-4">
                <h3 class="mb-3">Company Information</h3>
            <CompanyInfoForm SaveCompanyInfoSuccess="@SaveCompanyInfoSuccess" SaveCompanyInfoError="@SaveCompanyInfoError" OnSubmit="@HandleCompanySubmit" IsEdit="true" Company="@Company" />
        </div>
        }

        @if (AddressActive)
        {
            @if (Address == null)
            {
                <div>Loading...</div>
            }
            else
            {
                <div class="create-account-container mb-4">
                    <h3 class="mb-3">Address</h3>
                    <AddressForm SaveAddressSuccess="@SaveAddressSuccess" SaveAddressError="@SaveAddressError" OnSubmit="@HandleAddressSubmit" IsEdit="true" Address="@Address" />
                </div>
            }

        }
    }

    <div class="panel company-panel mt-4">
        <div class="layout">
            <h2 class="company-header fs-4 fw-bold title">Companies/Vendors</h2>
            <p class="company-description desc">Manage companies that have registered</p>
        </div>
        <span class="building"><i alt="building icon" class="fa-solid fa-building fa-2x"></i></span>
        <a href="/companies"@* @onclick="@HandleNavigationCompanyList"*@ class="stretched-link"></a>
    </div>

    <div class="panel home-panel mb-4 mt-4">
        <div class="layout">
            <h2 class="home-header fs-4 fw-bold title">Home Page</h2>
            <p class="home-description desc">Go back to home page to do various tasks</p>
        </div>
        <span class="house"><i alt="house icon" class="fa-solid fa-house fa-2x"></i></span>
        <a href="/" class="stretched-link"></a>
    </div>
</div>

@code {
    [Parameter]
    public int CompanyId { get; set; }

    private Company? Company { get; set; }
    private Account? Account { get; set; }
    private Address? Address { get; set; }

    private string? SaveAccountSuccess { get; set; }
    private string? SaveAccountError { get; set; }

    private string? SaveCompanyInfoSuccess { get; set; }
    private string? SaveCompanyInfoError { get; set; }

    private string? SaveAddressSuccess { get; set; }
    private string? SaveAddressError { get; set; }

    private bool AccountActive = true;
    private bool InfoActive = false;
    private bool AddressActive = false;



    protected override async Task OnParametersSetAsync()
    {
        await LoadData();

    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();
        Company = await context.Companies.FirstOrDefaultAsync(comp => comp.Id == CompanyId);

        Account = await context.Accounts.FirstOrDefaultAsync(acc => acc.CompanyId == CompanyId);
        Address = await context.Addresses.FirstOrDefaultAsync(add => add.CompanyId == CompanyId);
        SaveAccountSuccess = null;
        SaveAccountError = null;
        SaveCompanyInfoSuccess = null;
        SaveCompanyInfoError = null;
        SaveAddressSuccess = null;
        SaveAddressError = null;
    }

    private async Task HandleCompanySubmit(bool isValid)
    {
        if (isValid)
        {
            if (Company is not null)
            {
                try
                {
                    using var context = ContextFactory.CreateDbContext();

                    if(Company.Diversity_Certification != "Other")
                    {
                        Company.Other_Diversity_Certification = "";
                    }
                    context.Update(Company);
                    await context.SaveChangesAsync();
                    await LoadData();
                    SaveCompanyInfoSuccess = "Saved Company Info changes successfully!";
                }
                catch{
                    await LoadData();
                    SaveCompanyInfoError = "There was an error while saving Company Info changes. Please try again.";
                }
            }
        }
        else
        {
            await LoadData();
        }
    }

    private async Task HandleAccountSubmit(bool isValid)
    {
        if (isValid)
        {
            if (Account is not null)
            {
                try
                {
                    using var context = ContextFactory.CreateDbContext();             
                    context.Update(Account);
                    await context.SaveChangesAsync();
                    await LoadData();
                    SaveAccountSuccess = "Saved Account changes successfully!";
                }
                catch
                {
                    await LoadData();
                    SaveAccountError = "There was an error while saving Account changes. Please try again.";
                }
            }
        }

    }

    private async Task HandleAddressSubmit(bool isValid)
    {
        if (isValid)
        {
            if (Address is not null)
            {
                try
                {
                    using var context = ContextFactory.CreateDbContext();
                    context.Update(Address);
                    await context.SaveChangesAsync();
                    await LoadData();
                    SaveAddressSuccess = "Saved Address changes successfully!";
                }
                catch 
                {
                    await LoadData();
                    SaveAddressError = "There was an error while saving Address changes. Please try again.";
                }
            }
        }
    }

    private void HandleAccountActive()
    {
        AccountActive = true;
        InfoActive = false;
        AddressActive = false;
    }

    private void HandleInfoActive()
    {
        AccountActive = false;
        InfoActive = true;
        AddressActive = false;
    }

    private void HandleAddressActive()
    {
        AccountActive = false;
        InfoActive = false;
        AddressActive = true;
    }

    //private void HandleNavigationCompanyList()
    //{
    //    NavigationManager.NavigateTo($"/companies/{StateContainer.CompanyInfoPage}");
    //}
}
