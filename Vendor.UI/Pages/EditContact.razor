@page "/edit/company-contacts/{CompanyId:int}"
@inject IDbContextFactory<VendorDataDbContext> ContextFactory
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager


@if (Authorized_Contact is null)
{
    <div>Loading...</div>
}
else
{
    <div class="main">
    <div class="contacts-group mb-4">

        <h2 class="contacts-title fs-3 fw-bold mb-4">Company Contacts:</h2>
        <ContactsForm ContactList="@ContactList" Company="@Company" Authorized_Contact="@Authorized_Contact" IsEdit="true" OnSubmit="@HandleContactSubmit"
                  ContactError="@ContactError" FirstName="@FirstName" LastName="@LastName" Email="@Email" Number="@Number" />
    </div>


    <div class="panel company-panel mt-4">
        <div class="layout">
            <h2 class="company-header fs-4 fw-bold title">Companies/Vendors</h2>
            <p class="company-description desc">Manage companies that have registered</p>
        </div>
        <span class="building"><i alt="building icon" class="fa-solid fa-building fa-2x"></i></span>
        <a @onclick="@HandleNavigationCompanyList" class="stretched-link"></a>
    </div>

    <div class="panel home-panel mb-4 mt-4">
        <div class="layout">
            <h2 class="home-header fs-4 fw-bold title">Home Page</h2>
            <p class="home-description desc">Go back to home page to do various tasks</p>
        </div>
        <span class="house"><i alt="house icon" class="fa-solid fa-house fa-2x"></i></span>
        <a href="/" class="stretched-link"></a>
    </div>
    </div>
  }  


@code {
    [Parameter]
    public int CompanyId { get; set; }

    public Authorized_Contacts? Authorized_Contact { get; set; }
    public List<Authorized_Contacts>? ContactList { get; set; }

    public Company? Company { get; set; }

    private string FirstName { get; set; } = default!;
    private string LastName { get; set; } = default!;
    private string Email { get; set; } = default!;
    private int? Number { get; set; }
    private string? ContactError { get; set; } = default!;





    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();
        Authorized_Contact = await context.Authorized_Contacts.FirstOrDefaultAsync(cont => cont.CompanyId == CompanyId);
        Company = await context.Companies.FirstOrDefaultAsync(comp => comp.Id == CompanyId);
        ContactList = await context.Authorized_Contacts.Where(cont => cont.CompanyId == CompanyId && cont.Contact_Deleted == false).ToListAsync();
        ContactsForm.Contacts = new();
    }

    private async Task HandleContactSubmit(bool isValid)
    {
        if (Authorized_Contact is null || !isValid)
        {
            await LoadData();
        }
        else
        {

            /*
             * using var context = ContextFactory.CreateDbContext();


            // context.Update(Authorized_Contacts.Contact);
            //  context.Update(ContactList);
            if(ContactsForm.Contacts is not null)
            {
               // Authorized_Contact.CompanyId = CompanyId;
                if(ContactList is not null)
                {
                    foreach(var contact in ContactList)
                    {
                        var dbContact = context.Authorized_Contacts.FirstOrDefault(x => x.Id == contact.Id);

                        if (dbContact != null) {
                            dbContact.CompanyId = contact.CompanyId;
                            dbContact.FirstName = contact.FirstName;
                            dbContact.LastName = contact.LastName;
                            dbContact.Email = contact.Email;
                            dbContact.Phone_Number = contact.Phone_Number;
                            context.Update(dbContact);
                        }
                    }
                }
              //  context.Authorized_Contacts.Update(Authorized_Contact);
                await context.SaveChangesAsync();
             */

            await LoadData();
        }
    }
    private void HandleNavigationCompanyList()
    {
        NavigationManager.NavigateTo($"/companies/{StateContainer.CompanyInfoPage}");
    }
}


