@page "/edit/company-types-and-categories/{CompanyId:int}"
@inject IDbContextFactory<VendorDataDbContext> ContextFactory
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

<div class="main">

    <div class="types-categories-group mb-4">
        @if (Company is not null)
        {
            <h3 class="prompt fs-3 fw-bold mb-4">Edit/View Types and Categories for the Company: @Company.Name</h3>
        }
        <p class="fw-bold">
            Please check all types and categories that relate to the company.
            Click save when done.
        </p>
        <div class="layout">
            <div class="search-view-type">
                <div class="input-group mb-3">
                    <label for="search" hidden>Search Type </label>
                    <input type="text" id="search" placeholder=" Search Type... "
                           @onkeyup="@FilterKeyUp" @bind-value="@FilterTypeString" class="type-search-input form-control mb-3" />
                    <button class="btn btn-sm btn-secondary" type="button" @onclick="ButtonFilterClick">Filter</button>
                </div>


                <div class="types mt-3">
                    <p class="types-title fs-5 fw-bold">Type</p>

                    <ul class="type-data">
                        @if (QueryableTypes is not null)
                        {
                            @foreach (var type in QueryableTypes)
                            {
                                @* @if (type.Is_Checked)
                                {*@
                                @if (CheckedTypes.Any(check => check.Id == type.Id))
                                {
                                    <li class="typeLi mb-1">
                                        <label id="key" for="@type.Type_Name">
                                            <input @key="@type.Id" checked id="@type.Type_Name" value="@type.Is_Checked" @onchange="(args) => HandleTypeChange(args, type.Id)" class="form-check-input type-check"
                                       Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                        </label>
                                        <br />
                                    </li>
                                }
                                else
                                {
                                     <li class="typeLi mb-1">
                                        <label id="key" for="@type.Type_Name">
                                            <input @key="@type.Id" id="@type.Type_Name" value="@type.Is_Checked" @onchange="(args) => HandleTypeChange(args, type.Id)" class="form-check-input type-check"
                                       Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                        </label>
                                        <br />
                                    </li>
                                }
                                @* }
                                else
                                {
                                    <li class="typeLi mb-1">
                                        <label id="key" for="@type.Type_Name">
                                            <input @key="@type.Id" value="@type.Is_Checked" id="@type.Type_Name" @onchange="() => HandleTypeChange(type.Id)" class="form-check-input type-check"
                                       Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                        </label>
                                        <br />
                                    </li>
                                }*@
                            }

                        }
                    </ul>

                </div>
            </div>

            <div class="view-search-type">
                <div class="input-group mb-3">
                    <label for="search-cat" hidden>Search Category</label>
                    <input type="text" id="search-cat" placeholder=" Search Category... "
                           @onkeyup="@FilterKeyUp" @bind-value="@FilterCategoryString" class="category-search-input form-control mb-3" />
                    <button class="btn btn-sm btn-secondary" type="button" @onclick="@ButtonFilterClick">Filter</button>
                </div>




                <div class="categories mt-3">

                    <p class="cat-title fs-5 fw-bold">Categories:</p>

                    <ul class="cat-data">
                        @if (QueryableCategories is not null)
                        {
                            @foreach (var cat in QueryableCategories)
                            {
                                using var context = ContextFactory.CreateDbContext();

                                var UniqueType = context.Business_Types.FirstOrDefault(type => type.Id == cat.Type_Id);



                                @*@if (cat.Is_Checked || CheckedCategories.Any(check => check.Id == cat.Id))  //Keep in case of unexpected error
                                {*@
                                @if (CheckedCategories.Any(check => check.Id == cat.Id))
                                {
                                    <li class="catLi mb-1">
                                        <label id="key" for="@cat.Category_Name">
                                            <input @key="@cat.Id" checked value="@cat.Is_Checked" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                       name="@cat.Category_Name" type="checkbox" /><strong> @UniqueType.Type_Name:</strong> @cat.Category_Name
                                        </label>
                                        <br />
                                    </li>
                                }
                                else
                                {
                                     <li class="catLi mb-1">
                                        <label id="key" for="@cat.Category_Name">
                                            <input @key="@cat.Id" value="@cat.Is_Checked" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                       name="@cat.Category_Name" type="checkbox" /><strong> @UniqueType.Type_Name:</strong> @cat.Category_Name
                                        </label>
                                        <br />
                                    </li>
                                }
                                @* }
                                else
                                {
                                    <li class="catLi mb-1">
                                        <label id="key" for="@cat.Category_Name">
                                            <input @key="cat.Id" value="@cat.Is_Checked" @onchange="() => HandleCategoryChange(cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                       name="@cat.Category_Name" type="checkbox" /><strong> @UniqueType.Type_Name:</strong> @cat.Category_Name
                                        </label>
                                        <br />
                                    </li>


                                }*@
                            }
                        }
                    </ul>

                </div>

            </div>
        </div>

        <p class="fw-bold mt-3">Categories Saved: @CurrentCategoryCount</p>
        <button @onclick="() => HandleCategoryClear()" style="align-self: flex-start" class="btn btn-outline-danger btn-sm">Clear Categories</button>
    </div>

    <button type="button" @onclick="() => HandleTypesCatsSubmit()" class="save-btn btn btn-success mb-3">Save Types and Changes</button>

    @if (SuccessMessage is not null)
    {
        <div class="alert alert-success">@SuccessMessage</div>
    }
    @if (ErrorMessage is not null)
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }


    <div class="panel company-panel mt-4">
        <div class="panel-layout">
            <h2 class="company-header fs-4 fw-bold title">Companies/Vendors</h2>
            <p class="company-description desc">Manage companies that have registered</p>
        </div>
        <span class="building"><i alt="building icon" class="fa-solid fa-building fa-2x"></i></span>
        <a href="/companies" @*@onclick="@HandleNavigationCompanyList" *@ class="stretched-link"></a>
    </div>

    <div class="panel home-panel mb-4 mt-4">
        <div class="panel-layout">
            <h2 class="home-header fs-4 fw-bold title">Home Page</h2>
            <p class="home-description desc">Go back to home page to do various tasks</p>
        </div>
        <span class="house"><i alt="house icon" class="fa-solid fa-house fa-2x"></i></span>
        <a href="/" class="stretched-link"></a>
    </div>
</div>


@code {
    [Parameter]
    public int CompanyId { get; set; }

    public Company? Company { get; set; }
    public Business_Types? Type { get; set; }
    public Business_Categories? Category { get; set; }
    public Company_Types_Categories? CompanyTypeAndCat { get; set; }
    public List<Company_Types_Categories>? CompanyCategories = new List<Company_Types_Categories>();

    private Company_Types_Categories[]? CurrentCompanyCategories { get; set; }
    private Company_Types_Categories[]? CurrentCompanyTypes { get; set; }
    private Company_Types_Categories? CategoryRemove { get; set; }
    private Company_Types_Categories? CurrentCategory { get; set; }

    private List<Business_Categories> FilteredCategories = new List<Business_Categories>();

    private string? FilterTypeString { get; set; }
    private string? FilterCategoryString { get; set; }

    public Business_Types[]? Types { get; set; }
    public Business_Types[]? QueryableTypes { get; set; }
    public List<Business_Categories>? QueryableCategories = new List<Business_Categories>();


    public Business_Categories[]? Categories { get; set; }


    private List<Authorized_Contacts>? Contacts = new List<Authorized_Contacts>();
    private List<Business_Types> CheckedTypes = new List<Business_Types>();
    private List<Business_Categories> CheckedCategories = new List<Business_Categories>();
    private List<Business_Categories> FilteredCheckedCategories = new List<Business_Categories>();

    private string? CategoryError { get; set; }
    private int? CurrentCategoryCount { get; set; }

    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        Company = await context.Companies.FirstOrDefaultAsync(comp => comp.Id == CompanyId);
        Types = await context.Business_Types.OrderBy(type => type.Type_Name).ToArrayAsync();
        Categories = await context.Business_Categories.OrderBy(cat => cat.Category_Name).ToArrayAsync();

        CurrentCompanyCategories = await context.Company_Types_Categories.Where(comp => comp.CompanyId == CompanyId).ToArrayAsync();




        //foreach (var type in Types)
        //{
        //    type.Is_Checked = false;
        //    context.Update(type);
        //    await context.SaveChangesAsync();
        //}

        //foreach (var cat in Categories)
        //{
        //    cat.Is_Checked = false;
        //    context.Update(cat);
        //    await context.SaveChangesAsync();
        //}

        foreach (var comp in CurrentCompanyCategories)
        {

            foreach (var type in Types.Where(type => type.Id == comp.Type_Id))
            {
                if (!CheckedTypes.Any(check => check.Id == type.Id))
                {
                    CheckedTypes.Add(type);
                }
            }

            foreach (var cat in Categories.Where(cat => cat.Id == comp.Category_Id))
            {
                if (!CheckedCategories.Any(check => check.Id == cat.Id))
                {
                    CheckedCategories.Add(cat);
                }

                if (!FilteredCategories.Any(check => check.Id == cat.Id))
                {
                    FilteredCategories.Add(cat);
                }
            }

            foreach (var type in CheckedTypes)
            {
                var CategoryList = await context.Business_Categories.Where(category => category.Type_Id == type.Id).ToArrayAsync();

                foreach (var category in CategoryList)
                {
                    if (!FilteredCategories.Any(filter => filter.Id == category.Id))
                    {
                        FilteredCategories.Add(category);   //Renders All Categories for each Type checked
                    }
                }
            }


        }

            





        //////////////////////////////////
        //var Cats = await context.Business_Categories.Where(cat => cat.Id == comp.Category_Id).ToArrayAsync();
        //foreach (var cat in Cats)
        //{
        //    var Type = await context.Business_Types.FirstOrDefaultAsync(type => type.Id == cat.Type_Id);
        //    var CategoryList = await context.Business_Categories.Where(category => category.Type_Id == Type.Id).ToArrayAsync();


        //    Type.Is_Checked = true;
        //    context.Update(Type);

        //    foreach (var category in CategoryList)
        //    {
        //        if (!FilteredCategories.Any(filter => filter.Id == category.Id))
        //        {
        //            FilteredCategories.Add(category);   //Renders All Categories for each Type checked
        //        }
        //    }

        //    cat.Is_Checked = true;
        //    context.Update(cat);
        //    await context.SaveChangesAsync();

        //    if (!CheckedTypes.Any(type => type.Id == Type.Id))
        //    {
        //        CheckedTypes.Add(Type);                 //helps render categories when a type is clicked
        //    }

        //    CheckedCategories.Add(cat);                 //helps database when saving changes

        //}


        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();

        CurrentCompanyCategories = await context.Company_Types_Categories.Where(comp => comp.CompanyId == CompanyId).ToArrayAsync();
        CurrentCategoryCount = await context.Company_Types_Categories.Where(comp => comp.CompanyId == CompanyId).CountAsync();



        IQueryable<Business_Types> TypeQuery = context.Business_Types;
        TypeQuery = AddTypeFilter(TypeQuery);
        QueryableTypes = await TypeQuery.OrderBy(type => type.Type_Name).ToArrayAsync();


        if (!string.IsNullOrWhiteSpace(FilterCategoryString) && QueryableCategories is not null)
        {
            QueryableCategories.Clear();
            foreach (var cat in FilteredCategories.Where(cat => cat.Category_Name != null && cat.Category_Name.ToLower().Contains(this.FilterCategoryString.ToLower())))
            {
                QueryableCategories.Add(cat);
            }
        }
        else if (string.IsNullOrWhiteSpace(FilterCategoryString) && QueryableCategories is not null)
        {
            QueryableCategories.Clear();
            foreach (var cat in FilteredCategories)
            {
                QueryableCategories.Add(cat);
            }
        }

        SuccessMessage = null;
        ErrorMessage = null;

    }


    private async Task HandleTypeChange(ChangeEventArgs args, int TypeId)
    {

        bool IsSelected = (bool)args.Value;
        using var context = ContextFactory.CreateDbContext();
        Type = await context.Business_Types.FirstOrDefaultAsync(type => type.Id == TypeId);
        //Type.Is_Checked = !Type.Is_Checked;
        //context.Update(Type);
        //await context.SaveChangesAsync();

        if (IsSelected)
        {
            if (Type is not null && !CheckedTypes.Any(check => check.Id == TypeId))
            {
                CheckedTypes.Add(Type);
            }
        }

        if (!IsSelected)
        {
            CheckedTypes.RemoveAll(type => type.Id == TypeId);
        }

        await LoadCategories();
        await LoadData();
    }

    private async Task LoadCategories()
    {
        using var context = ContextFactory.CreateDbContext();

        FilteredCategories.Clear();

        foreach (var type in CheckedTypes)
        {
            var CatList = await context.Business_Categories.Where(cat => cat.Type_Id == type.Id).ToArrayAsync();

            foreach (var cat in CatList)
            {
                if (!FilteredCategories.Any(filter => filter.Id == cat.Id))
                {
                    FilteredCategories.Add(cat);
                }
            }

        }
    }


    private async Task HandleCategoryChange(ChangeEventArgs args, int CatId)
    {

        bool IsSelected = (bool)args.Value;
        using var context = ContextFactory.CreateDbContext();
        Category = await context.Business_Categories.FirstOrDefaultAsync(cat => cat.Id == CatId);

        //Category.Is_Checked = !Category.Is_Checked;
        //context.Update(Category);
        //await context.SaveChangesAsync();

        if (IsSelected)
        {
            if (Category is not null && !CheckedCategories.Any(cat => cat.Id == CatId))
            {
                CheckedCategories.Add(Category);
            }
        }

        if (!IsSelected)
        {
                CheckedCategories.RemoveAll(cat => cat.Id == CatId);
        }
        await LoadCategories();
    }

    private async Task HandleTypesCatsSubmit()
    {
        using var context = ContextFactory.CreateDbContext();

        if (!CheckedCategories.Any())
        {
            ErrorMessage = "Need at least one category checked to save changes. Please try again. (Select Other if none of the categories apply)";
            return;
        }


        foreach (var cat in CurrentCompanyCategories)
        {
            var dbCompTypeCat = await context.Company_Types_Categories.FirstOrDefaultAsync(comp => comp.Id == cat.Id);
            context.Remove(dbCompTypeCat);
            await context.SaveChangesAsync();  // Remove/deletes everything in database
        }


        foreach (var cat in CheckedCategories)
        {

            if (CurrentCompanyCategories is not null)
            {

                if (!CompanyCategories.Any(category => category.Category_Id == cat.Id))  //doesn't add already included categories into database
                {
                    if (Company is not null)
                    {
                        CompanyTypeAndCat = new();
                        CompanyTypeAndCat.CompanyId = Company.Id;
                        CompanyTypeAndCat.Category_Id = cat.Id;
                        CompanyTypeAndCat.Type_Id = cat.Type_Id;
                        if (CompanyCategories is not null)
                        {
                            CompanyCategories.Add(CompanyTypeAndCat); //Add eveything thats checked into database
                        }
                    }
                }

            }
        }

        try
        {
            context.Company_Types_Categories.AddRange(CompanyCategories);
            await context.SaveChangesAsync();
            CompanyCategories.Clear();
            await LoadData();
            SuccessMessage = "Saved Type and Category changes successfully!";
        }
        catch
        {
            await LoadData();
            ErrorMessage = "There was an error while saving changes. Please try again."; 
        }

    }


    private async Task FilterKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadData();
        }
    }

    private async Task ButtonFilterClick()
    {
        await LoadData();
    }

    private IQueryable<Business_Types> AddTypeFilter(IQueryable<Business_Types> TypeQuery)
    {
        if (!string.IsNullOrWhiteSpace(FilterTypeString))
        {
            return TypeQuery.Where(type => type.Type_Name != null && type.Type_Name.Contains(this.FilterTypeString));
        }
        return TypeQuery;
    }

    private IQueryable<Business_Categories> AddCategoryFilter(IQueryable<Business_Categories> CatQuery)
    {
        if (!string.IsNullOrWhiteSpace(FilterCategoryString))
        {
            return CatQuery.Where(cat => cat.Category_Name != null && cat.Category_Name.Contains(this.FilterCategoryString));
        }
        return CatQuery;
    }

    private async Task HandleCategoryClear()
    {
        using var context = ContextFactory.CreateDbContext();


        var isOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to reset all Type and Categories from the company? There's no going back.");

        if (isOk)
        {
            try
            {
                foreach (var cat in Categories)
                {
                    //cat.Is_Checked = false;
                    //context.Update(cat);
                    //await context.SaveChangesAsync();
                    CheckedCategories.RemoveAll(check => check.Id == cat.Id);
                }
                foreach (var type in Types)
                {
                    //type.Is_Checked = false;
                    //context.Update(type);
                    //await context.SaveChangesAsync();
                    CheckedTypes.RemoveAll(type => type.Id == type.Id);

                }

                foreach (var comp in CurrentCompanyCategories)
                {
                    context.Remove(comp);
                    await context.SaveChangesAsync();
                }

                await LoadCategories();
                await LoadData();
                SuccessMessage = "Company Types and Categories Reset Successfully!";
            }
            catch
            {
                await LoadData();
                ErrorMessage = "There was an error while resetting Company Types and Categories. Please try again.";
            }
    }
    }

 
}
