@page "/notifications"
@using System.Net.Mail
@using System.Net
@using System.Net.Mime
@inject IDbContextFactory<VendorDataDbContext> ContextFactory
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@using System.IO;
@using System.Reflection
@using System.Text.RegularExpressions
@using System.Globalization
@using Meziantou.Framework


<main class="main mt-4">

    @if (SendNotifs)
    {
        <h2 class="title notif-title mt-4">Notifications</h2>
        <div class="tabs-content">

            <div class="notifications-group mt-4">

                <form action="#" id="notif-form">

                    <div class="tab">
                        <button type="button" @onclick="(e => DisplayTab(1))" class="@((tab1) ? "active" : "")">
                            <span alt="user icon" class="oi oi-briefcase"></span><br />
                            <span class="d-none d-sm-inline">Types</span>
                        </button>

                        <button type="button" @onclick="(e => DisplayTab(2))" class="@((tab2) ? "active" : "")">
                            <span alt="building icon" class="oi oi-paperclip"></span><br />
                            <span class="d-none d-sm-inline">Categories</span>
                        </button>

                        <button type="button" @onclick="(e => DisplayTab(3))" class="@((tab3) ? "active" : "")">
                            <span alt="address-book icon" class="oi oi-envelope-closed"></span><br />
                            <span class="d-none d-sm-inline">Companies</span>
                        </button>

                    </div>


                    @if (tab1)
                    {
                        <div class="tabcontent mb-4">
                            <div class="create-account-container mb-4">

                                <h4 class="fw-bold mb-3">Select Types:</h4>

                                <p class="send fw-bold">Which company types should the notification be sent too?</p>
                                <ul class="company-types mb-4">
                                    <li class=" mb-1">
                                        @if (TypeAll)
                                        {
                                            <label for="select-all-type">
                                                <input checked @onclick="() => HandleTypeAll()" type="checkbox" class="select-all-type form-check-input" id="select-all-type" />
                                                Select All
                                            </label>
                                        }
                                        else
                                        {
                                            <label for="select-all-type">
                                                <input @onclick="() => HandleTypeAll()" type="checkbox" class="select-all-type form-check-input" id="select-all-type" />
                                                Select All
                                            </label>
                                        }
                                    </li>
                                    @if (Types is not null)
                                    {
                                        @foreach (var type in Types)
                                        {

                                            @if (CheckedTypes.Any(check => check.Id == type.Id))
                                            {
                                                <li class="typeLi mb-1">
                                                    <label id="key" for="@type.Type_Name">
                                                        <input @key="@type.Id" checked id="@type.Type_Name" value="@type.Is_Checked" @onchange="(args) => HandleTypeChange(args, type.Id)" class="form-check-input type-check"
                                           Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                                    </label>
                                                    <br />
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="typeLi mb-1">
                                                    <label id="key" for="@type.Type_Name">
                                                        <input @key="@type.Id" id="@type.Type_Name" value="@type.Is_Checked" @onchange="(args) => HandleTypeChange(args, type.Id)" class="form-check-input type-check"
                                           Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                                    </label>
                                                    <br />
                                                </li>
                                            }
                                            @*@if (type.Is_Checked)
                            {
                            <li class="typeLi  mb-1">
                            <label id="key" for="@type.Type_Name">
                            <input @key="type.Id" checked id="@type.Type_Name" value="@type.Is_Checked" @onclick="() => HandleTypeChange(type.Id)" class="form-check-input type-check"
                            Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                            </label>
                            <br />
                            </li>
                            }
                            else
                            {
                            <li class="typeLi  mb-1">
                            <label id="key" for="@type.Type_Name">
                            <input @key="type.Id" id="@type.Type_Name" value="@type.Is_Checked" @onclick="() => HandleTypeChange(type.Id)" class="form-check-input type-check"
                            Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                            </label>
                            <br />
                            </li>
                            }*@
                                        }
                                    }
                                    else
                                    {
                                        <div>Loading...</div>
                                    }
                                </ul>

                            </div>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => NextButtonClick(1)">Next</button>

                        </div>
                    }
                    @if (tab2)
                    {
                        <div class="tabcontent mb-4">
                            <div class="create-account-container mb-4">

                                <h4 class="fw-bold mb-3">Select Categories:</h4>

                                <p class="send fw-bold">Which company categories should the notification be sent too?</p>
                                <ul class="company-categories mb-4">
                                    <li class=" mb-1">
                                        @if (CategoryAll)
                                        {
                                            <label for="select-all-category">
                                                <input @onclick="() => HandleCategoryAll()" checked type="checkbox" class="form-check-input" id="select-all-category" />
                                                Select All
                                            </label>
                                        }
                                        else
                                        {
                                            <label for="select-all-category">
                                                <input @onclick="() => HandleCategoryAll()" type="checkbox" class="form-check-input" id="select-all-category" />
                                                Select All
                                            </label>
                                        }
                                    </li>

                                    @if (FilteredCategories is not null && !IsBusy)
                                    {

                                        @foreach (var cat in FilteredCategories)
                                        {
                                            var UniqueType = Types.FirstOrDefault(type => type.Id == cat.Type_Id);

                                            @*@if (cat.Is_Checked || CheckedCategories.Any(check => check.Id == cat.Id))  //Keep in case of unexpected error
                            {*@
                                            @if (CheckedCategories.Any(check => check.Id == cat.Id))
                                            {
                                                <li class="catLi mb-1">
                                                    <label id="key" for="@cat.Category_Name">
                                                        <input @key="@cat.Id" checked value="@cat.Is_Checked" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                           name="@cat.Category_Name" type="checkbox" /><strong> @UniqueType.Type_Name:</strong> @cat.Category_Name
                                                    </label>
                                                    <br />
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="catLi mb-1">
                                                    <label id="key" for="@cat.Category_Name">
                                                        <input @key="@cat.Id" value="@cat.Is_Checked" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                           name="@cat.Category_Name" type="checkbox" /><strong> @UniqueType.Type_Name:</strong> @cat.Category_Name
                                                    </label>
                                                    <br />
                                                </li>
                                            }
                                        }
                                    }
                                    @*@foreach (var cat in FilteredCategories)
                            {
                            @foreach (var type in Types.Where(type => type.Id == cat.Type_Id))
                            {

                            @if (cat.Is_Checked)
                            {
                            <li class="catLi  mb-1">
                            <label id="key" for="@cat.Category_Name">
                            <input @key="cat.Id" checked @onclick="() => HandleCategoryChange(cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                            name="@cat.Category_Name" type="checkbox" /><strong>@type.Type_Name:</strong> @cat.Category_Name
                            </label>
                            <br />
                            </li>
                            }
                            else
                            {
                            <li class="catLi  mb-1">
                            <label id="key" for="@cat.Category_Name">
                            <input @key="cat.Id" @onclick="() => HandleCategoryChange(cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                            name="@cat.Category_Name" type="checkbox" /><strong>@type.Type_Name:</strong> @cat.Category_Name
                            </label>
                            <br />
                            </li>
                            }
                            }
                            }*@
                                    else if (FilteredCategories is null || IsBusy)
                                    {
                                        <div>Loading...</div>
                                    }
                                </ul>

                            </div>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => PreviousButtonClick(2)">Previous</button>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => NextButtonClick(2)">Next</button>

                        </div>
                    }
                    @if (tab3)
                    {

                        <div class="tabcontent mb-4">
                            <div class="create-account-container mb-4">

                                <h4 class="fw-bold mb-3">Select Companies:</h4>

                                <p class="send fw-bold">Which companies should the notification be sent too?</p>

                                <ul class="company-send-list mb-4">
                                    <li class="mb-1">
                                        @if (CompanyAll)
                                        {
                                            <label for="select-all-company">
                                                <input @onclick="() => HandleCompanyAll()" checked type="checkbox" class="select-all-company form-check-input" id="select-all-company" />
                                                Select All
                                            </label>
                                        }
                                        else
                                        {
                                            <label for="select-all-company">
                                                <input @onclick="() => HandleCompanyAll()" type="checkbox" class="select-all-company form-check-input" id="select-all-company" />
                                                Select All
                                            </label>
                                        }
                                    </li>
                                    @if (RelatedCompanies is not null && Companies is not null)
                                    {
                                        @foreach (var rcompany in RelatedCompanies)
                                        {
                                            @* @foreach (var company in Companies.Where(comp => comp.Id == rcompany.CompanyId))
                            {*@
                                            var company = Companies.FirstOrDefault(comp => comp.Id == rcompany.CompanyId);

                                            if (company is not null)
                                            {
                                                if (SelectedCompanies.Any(sel => sel.Id == rcompany.CompanyId))
                                                {
                                                    <li class=" mb-1">
                                                        <label for="company-checkbox">
                                                            <input @onchange="(args) => HandleCompanyChange(args, company.Id)" @key="company.Id" checked type="checkbox" class="form-check-input" id="company-checkbox" />
                                                            @company.Name
                                                        </label>
                                                    </li>
                                                }
                                                else
                                                {


                                                    <li class=" mb-1">
                                                        <label for="company-checkbox">
                                                            <input @onchange="(args) => HandleCompanyChange(args, company.Id)" @key="company.Id" type="checkbox" class="form-check-input" id="company-checkbox" />
                                                            @company.Name
                                                        </label>
                                                    </li>
                                                }
                                                @*}*@
                                            }
                                        }
                                    }
                                    else if (RelatedCompanies is null || Companies is null || IsBusy)
                                    {
                                        <div>Loading...</div>
                                    }
                                </ul>

                            </div>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => PreviousButtonClick(3)">Previous</button>


                        </div>
                    }


                    <p style="font-size: 20" class="fw-bold">Selected Companies: @SelectedCompaniesCount</p>


                    <label for="subject-line" hidden>Subject Line</label>
                    <input @bind-value="SubjectLine" class="required form-control mb-2" id="subject-line" name="subject-line" type="text" placeholder="Subject Line" />

                    <div style="padding-bottom: 10px;" class="quill-div mb-2">
                        <BlazoredTextEditor @ref="@Quill">
                            <ToolbarContent>
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>


                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                <p>@EmailToPerson</p>
                                <br />
                                <br />
                                <br />
                                <br />
                                <br />
                                <br />
                                <p>Thank you,</p>
                                <p>Health and Hospital Corporation - Purchasing Department</p>
                                <p>Marion County Health Department</p>
                                <br />
                                <div class="col-md-4 p-3">
                                </div>
                            </EditorContent>
                        </BlazoredTextEditor>
                        <InputFile style="padding: 15px;" OnChange="e => LoadFiles(e)" multiple></InputFile>

                        @foreach (var file in uploadedFiles)
                        {
                            <div style="border: solid black 1px; padding: 5px; margin: 5px; border-radius: 5px; display: flex; justify-content: space-between; align-items: center;">
                                @if(file.UploadedPercentage == 100)
                                {
                                <button style="color: blue; text-decoration: underline;" type="button" class="btn btn-sm btn-light">@file.FileName</button> 
                                }
                                else
                                {
                                @file.FileName
                                }
                                <progress value="@file.UploadedBytes" max="@file.Size"></progress>
                                @file.UploadedPercentage.ToString("F1")%
                                (@FormatBytes(file.UploadedBytes) / @FormatBytes(file.Size))
                                <button @onclick="() => RemoveFile(file)" type="button" class="btn btn-sm btn-light"><span><i style="color: gray;" class="fa-solid fa-trash"></i></span></button>
                            </div>

                            var uploadedFile = loadedFiles.FirstOrDefault(loaded => loaded.Name == file.FileName);


                        }
                    </div>

                    <button type="button" disabled="@IsBusy" @onclick="@HandleNotifSubmit" class="btn btn-primary submit">Send Notification</button>
                    @if (IsBusyMessage is not null)
                    {
                        <div class="alert alert-secondary mt-2">@IsBusyMessage</div>
                    }
                    @if (SendNotifSuccess is not null)
                    {
                        <div class="alert alert-success mt-4">@SendNotifSuccess</div>
                    }
                    @if (SendNotifError is not null)
                    {
                        <div class="alert alert-danger mt-4">@SendNotifError</div>

                    }


                </form>
            </div>
        </div>
    }

    @if (PrevNotifs)
    {

        <h2 class="title notif-title mt-4">Previous Notifications</h2>

        <div class="previous-notifs-group pt-2 mt-1">
            <table class=" table dt-responsive nowrap w-100 mt-3" id="basic-datatable">
                <thead>
                    <tr class="header-row">
                        <th>Subject</th>
                        <th>Content</th>
                        <th>Sent To:</th>
                        <th>Date Sent:</th>
                    </tr>
                </thead>
                <tbody>
                    @if (NotifsHistory is not null)
                    {
                        @foreach (var notifs in NotifsHistory)
                        {

                            <tr>
                                <td>@notifs.Title</td>
                                <td>
                                    <button style="color: rgb(80, 80, 250); text-decoration: underline" type="button" class="btn" data-bs-toggle="modal" data-bs-target="#emailContents" @onclick="() => ModalShowEmailContents(notifs.Id)">
                                        @((MarkupString)notifs.Body.Substring(0, 15))
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#emailRecipients" @onclick="() => ModalShowEmailRecipients(notifs.Id)">Click to see Recipients</button>
                                </td>
                                <td>@notifs.Date_Sent</td>
                            </tr>

                        }

                    }
                </tbody>
            </table>

        </div>


        //Modal Start
        <div class="modal fade" id="emailContents" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">
                    <div style="flex-direction: column !important;" class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        <h4 class="modal-title justify-content-center">Notification Id: <strong>@NotificationId</strong></h4>
                        <h5 class="justify-content-center">Subject: <strong>@NotificationSubjectLine</strong></h5>
                    </div>
                    <div class="modal-body">
                        @if (NotificationBody is not null)
                        {
                            <p>@((MarkupString)NotificationBody)</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
                //Modal End

                //Modal Start
        <div class="modal fade" id="emailRecipients" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">
                    <div style="flex-direction: column !important;" class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        <h4 class="modal-title">Notification Id: <strong>@NotificationId</strong></h4>

                    </div>
                    <div class="modal-body">
                        <h5 style="text-decoration: underline">Recipients:</h5>

                        <ul>
                            @if (ListOfCompanies is not null)
                            {
                                @foreach (var comp in ListOfCompanies)
                                {
                                    <li>@comp</li>
                                }
                            }
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        //Modal End


    }
    <div class="panel home-panel mb-4 mt-4">
        <div class="layout">
            <h2 class="home-header fs-4 fw-bold title">Home Page</h2>
            <p class="home-description desc">Go back to home page to do various tasks</p>
        </div>
        <span class="house"><i alt="house icon" class="fa-solid fa-house fa-2x"></i></span>
        <a href="/" class="stretched-link"></a>
    </div>


    <div class="tab-div">
        <button @onclick="@SendNotifsActive" class="tab1-btn send-notifs-content @(SendNotifs == true ? "active-page" : "")" type="button">Send Notifications</button>
        <button disabled="@IsLoading" @onclick="@PrevNotifsActive" class="tab2-btn btn prev-notifs-content @(PrevNotifs == true ? "active-page" : "")" type="button">Previous Notifications</button>
    </div>


</main>

@code {

    private bool tab1 = true;
    private bool tab2 = false;
    private bool tab3 = false;
    //  private bool tab4 = false;
    private bool SendNotifs = true;
    private bool PrevNotifs = false;

    private Business_Types[]? Types { get; set; }
    public Business_Types? Type { get; set; }
    private List<Business_Types> CheckedTypes = new List<Business_Types>();


    private Business_Categories[]? Categories { get; set; }
    private Business_Categories? Category { get; set; }
    private List<Business_Categories> CheckedCategories = new List<Business_Categories>();

    private List<Business_Categories> FilteredCategories = new List<Business_Categories>();
    private List<Company_Types_Categories> FilteredCompanies = new List<Company_Types_Categories>();
    public List<Company_Types_Categories> RelatedCompanies = new List<Company_Types_Categories>();



    private Company_Types_Categories[]? CompanyTypesCats { get; set; }


    private Company[]? Companies { get; set; }
    private Company? Company { get; set; }
    private List<Company> SelectedCompanies = new List<Company>();
    private Vendor.Data.Models.Notifications[]? NotifsHistory { get; set; }
    private Notification_Recipient[]? NotifsRec { get; set; }
    private Notification_Recipient? RecipientObject { get; set; }


    public bool IsChecked { get; set; }
    public bool SendReoccuring { get; set; }

    BlazoredTextEditor? Quill;
    public string? QuillContent { get; set; }

    private string? SendNotifSuccess { get; set; }
    private string? SendNotifError { get; set; }
    private string? IsBusyMessage { get; set; }

    private bool IsBusy = false;
    private bool TypeAll = false;
    private bool CategoryAll = false;
    private bool CompanyAll = false;

    private int? SelectedCompaniesCount { get; set; }

    private string? SubjectLine = null;

    private Vendor.Data.Models.Notifications? Notif { get; set; }
    private int? NotificationId { get; set; }
    private string? NotificationSubjectLine { get; set; }
    private MarkupString? NotificationBody { get; set; }
    private int NotificationsCount { get; set; }

    private List<string> ListOfCompanies = new List<string>();
    bool ShowListModal = false;
    private MarkupString myMarkup { get; set; }

    private string? EmailToPerson { get; set; }
    private string? TemplateEmail { get; set; }

    private bool IsLoading { get; set; }

    private MemoryStream fileContents { get; set; }

    /////////////////////////////////////////////////////

    List<FileUploadProgress> uploadedFiles = new();
    private List<IBrowserFile> loadedFiles = new();

    MailMessage message = new MailMessage();

    StreamWriter writer { get; set; }



    private async ValueTask LoadFiles(InputFileChangeEventArgs e)
    {

        var files = e.GetMultipleFiles(maximumFileCount: 100);

        var startIndex = uploadedFiles.Count;

        // Add all files to the UI
        foreach (var file in files)
        {
            var progress = new FileUploadProgress(file.Name, file.Size);
            uploadedFiles.Add(progress);
            loadedFiles.Add(file);
        }

        // We don't want to refresh the UI too frequently,
        // So, we use a timer to update the UI every few hundred milliseconds
        await using var timer = new Timer(_ => InvokeAsync(() => StateHasChanged()));
        timer.Change(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));

        // Upload files
        byte[] buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(4096);
        try
        {

            foreach (var file in files)
            {

                //     using var ms = new MemoryStream();

                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                while (await stream.ReadAsync(buffer) is int read && read > 0)
                {
                    uploadedFiles[startIndex].UploadedBytes += read;
                    // TODO Do something with the file chunk, such as save it
                    // to a database or a local file system

                    //
                    var readData = buffer.AsMemory().Slice(0, read);
                    //    await ms.WriteAsync(readData);

                }

                var fileByte = new byte[stream.Length];

                fileContents = new MemoryStream(fileByte);
                await stream.CopyToAsync(fileContents);

                var bytebuffer = fileContents.ToArray();

                var byteString = Convert.ToBase64String(bytebuffer);
                var conversion = Convert.FromBase64String(byteString);

                // writer = new StreamWriter(fileContents);
                //using var writer = new StreamWriter(fileContents);

                //writer.WriteLine("Comma,Separated,Values,...");
                //writer.Flush();

                //writer.Flush();

                fileContents.Position = 0;

                message.Attachments.Add(new Attachment(fileContents, file.Name));

                //fs.Close();
                //fs.Dispose();
                //binaryReader.Close();

                startIndex++;
            }





        }
        finally
        {
            System.Buffers.ArrayPool<byte>.Shared.Return(buffer);

            //timer.Dispose();

            // Update the UI with the final progress
            StateHasChanged();
        }
    }

    // Use the Meziantou.Framework.ByteSize NuGet package.
    // You could also use Humanizer
    string FormatBytes(long value)
    => ByteSize.FromBytes(value).ToString("fi2", CultureInfo.CurrentCulture);

    record FileUploadProgress(string FileName, long Size)
    {
        public long UploadedBytes { get; set; }
        public double UploadedPercentage => (double)UploadedBytes / (double)Size * 100d;
    }

    //////////////////////////////////////////////////////////

    private async void HandleNotifSubmit()
    {
        using var context = ContextFactory.CreateDbContext();

        if (IsBusy)
        {
            return;
        }
        IsBusy = true;
        IsBusyMessage = "Sending...";
        SendNotifError = null;
        SendNotifSuccess = null;

        if (SelectedCompaniesCount == 0 || SelectedCompaniesCount is null)
        {
            IsBusy = false;
            IsBusyMessage = null;
            SendNotifError = "Please select at least one company to send the notification to.";
            return;
        }
        if (Quill is not null)
        {

            try
            {
                var sClient = new SmtpClient("SMTP.HHCORP.ORG");
                //  var message = new MailMessage();

                sClient.Port = 25;
                sClient.UseDefaultCredentials = false;

                if (SubjectLine is null)
                {
                    SendNotifSuccess = null;
                    SendNotifError = "Please provide a subject line.";
                    return;
                }
                else
                {
                    SendNotifError = null;
                    message.Subject = SubjectLine;
                }


                message.From = new MailAddress("test@hhcorp.org");
                message.IsBodyHtml = true;

                QuillContent = await this.Quill.GetHTML();

                var bytes = Convert.FromBase64String($"{StateContainer.LogoImage}");
                var contents = new MemoryStream(bytes);
                Attachment companyLogo = new Attachment(contents, "Logo.png", "image/png");
                companyLogo.ContentId = "logo";
                message.Attachments.Add(companyLogo);

                StateHasChanged();

                foreach (var company in SelectedCompanies)
                {

                    var CompanyContacts = await context.Authorized_Contacts.Where(contact => contact.CompanyId == company.Id && !contact.Contact_Deleted).ToArrayAsync();

                    foreach (var person in CompanyContacts)
                    {
                        if (person is not null)
                        {
                            EmailToPerson = $"{person.FirstName} {person.LastName},";
                            StateHasChanged();


                            message.To.Clear();            //So each email is sent to person one at a time: prevents other companies seeing their competitors
                            message.To.Add(new MailAddress($"{person.Email}"));

                        }
                        var Template = QuillContent + "<img width='150' src='cid:logo'>";

                        TemplateEmail = EmailToPerson + Template;
                        message.Body = TemplateEmail;

                        sClient.Send(message);
                        TemplateEmail = "";


                    }
                    EmailToPerson = "";

                }



                Notif = new Data.Models.Notifications();
                Notif.Title = SubjectLine;
                Notif.Body = "To Recipients," + QuillContent + "<img width='150' src='logo.PNG' />";
                Notif.Date_Sent = DateTime.Now;
                Notif.Created_By = "test@hhcorp.org";


                context.NotificationsList.Add(Notif);
                await context.SaveChangesAsync();




                foreach (var company in SelectedCompanies)
                {
                    RecipientObject = new Notification_Recipient();
                    RecipientObject.NotificationsId = Notif.Id;
                    RecipientObject.CompanyId = company.Id;
                    RecipientObject.CompanyName = company.Name;
                    context.Notification_Recipients.Add(RecipientObject);
                    await context.SaveChangesAsync();
                }
                await LoadData();
                SendNotifSuccess = "Sent Successfully!";

            }
            catch
            {
                SendNotifError = "There was an error while sending the notification. Please try again.";
            }
            finally
            {
                IsBusy = false;
                IsBusyMessage = null;
                StateHasChanged();
            }

        }

    }


    private void RemoveFile(FileUploadProgress file)
    {
        var attachment = message.Attachments.First(attachment => attachment.Name == file.FileName);
        message.Attachments.Remove(attachment);
        uploadedFiles.Remove(file);
        StateHasChanged();
    }

    //////////////////////////////////////////////////////////

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        using var context = ContextFactory.CreateDbContext();
        Types = await context.Business_Types.OrderBy(type => type.Type_Name).ToArrayAsync();
        Categories = await context.Business_Categories.OrderBy(cat => cat.Category_Name).ToArrayAsync();
        CompanyTypesCats = await context.Company_Types_Categories.ToArrayAsync();

        Companies = await context.Companies.Where(comp => comp.Is_Deleted == false)
        .Where(comp => comp.Disabled_From_Notifications == false)
        .OrderBy(comp => comp.Name)
        .ToArrayAsync();

        NotifsHistory = await context.NotificationsList.ToArrayAsync();



        //foreach (var type in Types)
        //{
        //    type.Is_Checked = false;
        //    context.Update(type);
        //    await context.SaveChangesAsync();
        //}

        //foreach (var cat in Categories)
        //{
        //    cat.Is_Checked = false;
        //    context.Update(cat);
        //    await context.SaveChangesAsync();
        //}

        //foreach (var comp in Companies)
        //{
        //    comp.Is_Checked = false;
        //    context.Update(comp);
        //    await context.SaveChangesAsync();
        //}

        await LoadData();
    }


    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = ContextFactory.CreateDbContext();

        Types = await context.Business_Types.OrderBy(type => type.Type_Name).ToArrayAsync();

        Companies = await context.Companies.ToArrayAsync();


        Companies = await context.Companies
        .Where(comp => comp.Is_Deleted == false)
        .Where(comp => comp.Disabled_From_Notifications == false)
        .OrderBy(comp => comp.Name)
        .ToArrayAsync();

        SendNotifSuccess = null;
        SendNotifError = null;

        NotifsHistory = await context.NotificationsList.ToArrayAsync();
        NotifsRec = await context.Notification_Recipients.ToArrayAsync();

        //   NotificationsCount = await context.NotificationsList.CountAsync();

        IsLoading = false;
    }

    public void DisplayTab(int TabNumber)
    {
        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;
                this.tab2 = false;
                this.tab3 = false;
                //      this.tab4 = false;

                break;
            case 2:
                this.tab1 = false;
                this.tab2 = true;
                this.tab3 = false;
                //      this.tab4 = false;

                break;
            case 3:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = true;
                //     this.tab4 = false;

                break;
            case 4:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = false;
                //    this.tab4 = true;

                break;
        }
    }

    private void NextButtonClick(int tab)
    {

        DisplayTab(tab + 1);
    }

    private void PreviousButtonClick(int tab)
    {
        DisplayTab(tab - 1);
    }

    private async Task SendNotifsActive()
    {
        SendNotifs = true;
        PrevNotifs = false;
        await JS.InvokeAsync<IJSObjectReference>("DataTablesRemove", "#basic-datatable");


        await LoadData();
    }

    private async Task PrevNotifsActive()
    {
        SendNotifs = false;
        PrevNotifs = true;
        await LoadData();
        await JS.InvokeAsync<IJSObjectReference>("DataTablesAddOrderbyDate", "#basic-datatable");
    }

    //private AlternateView GetEmbeddedImage(String filePath)
    //{
    //    LinkedResource res = new LinkedResource(filePath, MediaTypeNames.Image.Jpeg);
    //    res.ContentId = Guid.NewGuid().ToString();
    //    string htmlBody = @"<img src='cid:" + res.ContentId + @"'/>";
    //    AlternateView alternateView = AlternateView.CreateAlternateViewFromString(htmlBody, null, MediaTypeNames.Text.Html);
    //    alternateView.LinkedResources.Add(res);
    //    return alternateView;
    //}

    //private async void HandleNotifSubmit()
    //{
    //    using var context = ContextFactory.CreateDbContext();

    //    if (IsBusy)
    //    {
    //        return;
    //    }
    //    IsBusy = true;
    //    IsBusyMessage = "Sending...";
    //    SendNotifError = null;
    //    SendNotifSuccess = null;

    //    if (SelectedCompaniesCount == 0 || SelectedCompaniesCount is null)
    //    {
    //        IsBusy = false;
    //        IsBusyMessage = null;
    //        SendNotifError = "Please select at least one company to send the notification to.";
    //        return;
    //    }
    //    if (Quill is not null)
    //    {

    //        try
    //        {
    //            var sClient = new SmtpClient("SMTP.HHCORP.ORG");
    //          //  var message = new MailMessage();

    //            sClient.Port = 25;
    //            sClient.UseDefaultCredentials = false;

    //            if (SubjectLine is null)
    //            {
    //                SendNotifSuccess = null;
    //                SendNotifError = "Please provide a subject line.";
    //                return;
    //            }
    //            else
    //            {
    //                SendNotifError = null;
    //                message.Subject = SubjectLine;
    //            }


    //            message.From = new MailAddress("test@hhcorp.org");
    //            message.IsBodyHtml = true;

    //            QuillContent = await this.Quill.GetHTML();

    //            var bytes = Convert.FromBase64String($"{StateContainer.LogoImage}");
    //            var contents = new MemoryStream(bytes);
    //            Attachment companyLogo = new Attachment(contents, "Logo.png", "image/png");
    //            companyLogo.ContentId = "logo";
    //            message.Attachments.Add(companyLogo);



    //            foreach (var file in filesList)
    //            {

    //                var attachment = new Attachment(file.OpenReadStream(), file.ContentType);

    //                message.Attachments.Add(attachment);


    //            }



    //            var Template = QuillContent + "<img width='150' src='cid:logo'>";

    //            StateHasChanged();

    //            foreach (var company in SelectedCompanies)
    //            {

    //                var CompanyContacts = await context.Authorized_Contacts.Where(contact => contact.CompanyId == company.Id && !contact.Contact_Deleted).ToArrayAsync();

    //                foreach (var person in CompanyContacts)
    //                {
    //                    if (person is not null)
    //                    {
    //                        EmailToPerson = $"{person.FirstName} {person.LastName},";
    //                        StateHasChanged();


    //                        message.To.Clear();            //So each email is sent to person one at a time: prevents other companies seeing their competitors
    //                        message.To.Add(new MailAddress($"{person.Email}"));

    //                    }

    //                    TemplateEmail = EmailToPerson + Template;
    //                    message.Body = TemplateEmail;
    //                    TemplateEmail = "";

    //                    sClient.Send(message);
    //                }
    //                EmailToPerson = "";
    //            }



    //            Notif = new Data.Models.Notifications();
    //            Notif.Title = SubjectLine;
    //            Notif.Body = "To Recipients," + QuillContent + "<img width='150' src='logo.PNG' />";
    //            Notif.Date_Sent = DateTime.Now;
    //            Notif.Created_By = "test@hhcorp.org";


    //            context.NotificationsList.Add(Notif);
    //            await context.SaveChangesAsync();




    //            foreach (var company in SelectedCompanies)
    //            {
    //                RecipientObject = new Notification_Recipient();
    //                RecipientObject.NotificationsId = Notif.Id;
    //                RecipientObject.CompanyId = company.Id;
    //                RecipientObject.CompanyName = company.Name;
    //                context.Notification_Recipients.Add(RecipientObject);
    //                await context.SaveChangesAsync();
    //            }
    //            await LoadData();
    //            SendNotifSuccess = "Sent Successfully!";

    //        }
    //        catch
    //        {
    //            SendNotifError = "There was an error while sending the notification. Please try again.";
    //        }
    //        finally
    //        {
    //            IsBusy = false;
    //            IsBusyMessage = null;
    //            StateHasChanged();
    //        }

    //    }

    //}



    private void HandleTypeChange(ChangeEventArgs args, int TypeId)
    {
        bool IsSelected = (bool)args.Value;
        Type = Types.FirstOrDefault(type => type.Id == TypeId);
        //Type.Is_Checked = !Type.Is_Checked;
        //context.Update(Type);
        //await context.SaveChangesAsync();

        if (IsSelected)
        {
            if (Type is not null)
            {
                CheckedTypes.Add(Type);
            }
        }

        if (!IsSelected)
        {
            CheckedTypes.RemoveAll(type => type.Id == TypeId);
            TypeAll = false;
        }

        LoadCategories();
    }

    private void LoadCategories()
    {

        FilteredCategories.Clear();

        foreach (var type in CheckedTypes)
        {
            var CatList = Categories.Where(cat => cat.Type_Id == type.Id);

            foreach (var cat in CatList)
            {
                if (!FilteredCategories.Any(filter => filter.Id == cat.Id))
                {
                    FilteredCategories.Add(cat);
                }
            }

        }
        StateHasChanged();

    }

    private void HandleCategoryChange(ChangeEventArgs args, int CatId)
    {
        bool IsSelected = (bool)args.Value;
        Category = Categories.FirstOrDefault(cat => cat.Id == CatId);
        //Category.Is_Checked = !Category.Is_Checked;
        //context.Update(Category);
        //await context.SaveChangesAsync();


        if (IsSelected)
        {
            if (Category is not null && !CheckedCategories.Any(check => check.Id == CatId))
            {
                CheckedCategories.Add(Category);

                foreach (var company in CompanyTypesCats.Where(comp => comp.Category_Id == CatId))
                {
                    var Company = Companies.FirstOrDefault(comp => comp.Id == company.CompanyId);

                    if (Company is not null)
                    {
                        if (!RelatedCompanies.Any(comp => comp.CompanyId == company.CompanyId) && !Company.Disabled_From_Notifications && !Company.Is_Deleted)
                        {
                            RelatedCompanies.Add(company);
                        }
                    }
                }

            }
        }

        if (!IsSelected)
        {
            if (Category is not null)
            {
                CheckedCategories.RemoveAll(cat => cat.Id == CatId);

                RelatedCompanies.Clear();

                CategoryAll = false;


                foreach (var cat in CheckedCategories)
                {
                    foreach (var company in CompanyTypesCats.Where(company => company.Category_Id == cat.Id))
                    {
                        var Company = Companies.FirstOrDefault(comp => comp.Id == company.CompanyId); ////////
                        if (Company is not null)
                        {
                            if (!RelatedCompanies.Any(comp => comp.CompanyId == company.CompanyId) && !Company.Disabled_From_Notifications && !Company.Is_Deleted)
                            {
                                RelatedCompanies.Add(company); //This allows to add company back in if they have other categories that were checked
                            }
                        }
                    }
                }
            }
        }

        StateHasChanged();

        //await LoadData();
    }

    private void HandleCompanyChange(ChangeEventArgs args, int CompanyId)
    {
        bool IsSelected = (bool)args.Value;
        //using var context = ContextFactory.CreateDbContext();
        Company = Companies.FirstOrDefault(comp => comp.Id == CompanyId);
        //Company.Is_Checked = !Company.Is_Checked;
        //context.Update(Company);
        //await context.SaveChangesAsync();

        if (Company is not null)
        {
            if (IsSelected)
            {
                SelectedCompanies.Add(Company);
            }

            if (!IsSelected)
            {
                SelectedCompanies.RemoveAll(comp => comp.Id == CompanyId);
                CompanyAll = false;
            }
        }

        //  await LoadData();
        SelectedCompaniesCount = SelectedCompanies.Count();
        StateHasChanged();
    }

    private void HandleTypeAll()
    {
        //using var context = ContextFactory.CreateDbContext();
        TypeAll = !TypeAll;

        if (TypeAll)
        {
            //CheckedTypes.Clear();
            foreach (var type in Types)
            {
                //type.Is_Checked = true;
                //context.Update(type);
                //await context.SaveChangesAsync();

                if (!CheckedTypes.Any(check => check.Id == type.Id))
                {
                    CheckedTypes.Add(type);
                }
            }

        }

        if (!TypeAll)
        {
            foreach (var type in Types)
            {
                //type.Is_Checked = false;
                //context.Update(type);
                //await context.SaveChangesAsync();

                CheckedTypes.RemoveAll(Type => Type.Id == type.Id);
            }
        }
        LoadCategories();
        // await LoadData();
        StateHasChanged();

    }

    private void HandleCategoryAll()
    {

        CategoryAll = !CategoryAll;

        if (CategoryAll)
        {
            //CheckedCategories.Clear();
            //RelatedCompanies.Clear();

            foreach (var cat in FilteredCategories)
            {
                //cat.Is_Checked = true;
                //context.Update(cat);
                //await context.SaveChangesAsync();

                if (!CheckedCategories.Any(check => check.Id == cat.Id))
                {
                    CheckedCategories.Add(cat);
                }

                foreach (var ctc in CompanyTypesCats.Where(ctc => ctc.Category_Id == cat.Id))
                {
                    var Company = Companies.FirstOrDefault(comp => comp.Id == ctc.CompanyId);
                    if (Company is not null)
                    {

                        if (!RelatedCompanies.Any(comp => comp.CompanyId == ctc.CompanyId) && !Company.Disabled_From_Notifications && !Company.Is_Deleted)
                        {
                            RelatedCompanies.Add(ctc);
                        }
                    }
                }

            }

        }

        if (!CategoryAll)
        {
            foreach (var cat in FilteredCategories)
            {
                CheckedCategories.RemoveAll(check => check.Id == cat.Id);

            }

            RelatedCompanies.Clear();
            foreach (var cat in CheckedCategories)
            {
                foreach (var company in CompanyTypesCats.Where(company => company.Category_Id == cat.Id))
                {
                    var Company = Companies.FirstOrDefault(comp => comp.Id == company.CompanyId); ////////

                    if (Company is not null)
                    {
                        if (!RelatedCompanies.Any(comp => comp.CompanyId == company.CompanyId) && !Company.Disabled_From_Notifications && !Company.Is_Deleted)
                        {
                            RelatedCompanies.Add(company); //This allows to add company back in if they have other categories that were checked
                        }
                    }
                }
            }
            //foreach (var cat in FilteredCategories)
            //{
            //    cat.Is_Checked = false;
            //    context.Update(cat);
            //    await context.SaveChangesAsync();
            //}

        }
        //  await LoadData();
        StateHasChanged();
    }

    private void HandleCompanyAll()
    {
        //   using var context = ContextFactory.CreateDbContext();
        CompanyAll = !CompanyAll;

        if (CompanyAll)
        {
            foreach (var company in RelatedCompanies)
            {
                var Company = Companies.FirstOrDefault(comp => comp.Id == company.CompanyId);

                if (Company is not null)
                {
                    if (!SelectedCompanies.Any(company => company.Id == Company.Id) && !Company.Disabled_From_Notifications && !Company.Is_Deleted)
                    {
                        SelectedCompanies.Add(Company);
                    }
                }
            }

        }

        if (!CompanyAll)
        {
            foreach (var company in RelatedCompanies)
            {
                var Company = Companies.FirstOrDefault(comp => comp.Id == company.CompanyId);

                if (Company is not null)
                {
                    SelectedCompanies.RemoveAll(sel => sel.Id == Company.Id);
                }
            }
        }
        //    await LoadData();
        SelectedCompaniesCount = SelectedCompanies.Count();
        StateHasChanged();
    }


    private async Task ModalShowEmailContents(int NotifId)
    {
        using var context = ContextFactory.CreateDbContext();
        Notif = await context.NotificationsList.FirstOrDefaultAsync(notif => notif.Id == NotifId);
        myMarkup = new MarkupString($"{Notif.Body}");

        NotificationId = Notif.Id;
        NotificationSubjectLine = Notif.Title;
        NotificationBody = myMarkup;

    }
    private async Task ModalShowEmailRecipients(int NotifId)
    {
        ListOfCompanies.Clear();

        using var context = ContextFactory.CreateDbContext();

        var CompaniesSent = await context.Notification_Recipients.Where(rec => rec.NotificationsId == NotifId).ToListAsync();
        NotificationId = NotifId;

        if (CompaniesSent is not null)
        {
            foreach (var comp in CompaniesSent)
            {
                ListOfCompanies.Add(comp.CompanyName);
            }
        }

    }

}
