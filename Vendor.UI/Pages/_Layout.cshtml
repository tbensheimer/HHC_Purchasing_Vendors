@using Microsoft.AspNetCore.Components.Web
@namespace Vendor.UI.Pages

@*@namespace Blazor_Radzen_Google_Places_Autocomplete.Pages
*@
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Vendor.UI.styles.css" rel="stylesheet" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <link href="//cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />

    <script src="https://kit.fontawesome.com/21a81ba6b6.js" crossorigin="anonymous"></script>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">


</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>


    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="scripts/blazorInterop.js"></script>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>


    <script src="//cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

    <script async
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhZXnUK9Ah_lOHPM-1HOhbG5ztSOSF7ns&libraries=places&callback=initMap">
    </script>
    <script>

        function initAutocomplete() {

            let autocomplete;
            let address1Field;
            let address2Field;
            let postalField;
            let event = new Event('change');

            fillInAddress = (autocomplete) => {

                // Get the place details from the autocomplete object.
                const place = autocomplete.getPlace();

                let address1 = "";
                let postcode = "";

                // Get each component of the address from the place details,
                // and then fill-in the corresponding field on the form.
                // place.address_components are google.maps.GeocoderAddressComponent objects
                // which are documented at http://goo.gle/3l5i5Mr
                if (place) {
                    for (const component of place.address_components) {
                        const componentType = component.types[0];

                        switch (componentType) {
                            case "street_number": {
                                address1 = `${component.long_name} ${address1}`;
                                break;
                            }

                            case "route": {
                                address1 += component.short_name;
                                break;
                            }

                            case "postal_code": {
                                postcode = `${component.long_name}${postcode}`;
                                break;
                            }

                            case "postal_code_suffix": {
                                postcode = `${postcode}-${component.long_name}`;
                                break;
                            }
                            case "locality":
                               let locality = document.querySelector("#locality");
                               locality.value = component.long_name;
                               locality.dispatchEvent(event);
                                break;

                            case "administrative_area_level_1": {
                               let state = document.querySelector("#state");
                               state.value = component.long_name;
                               state.dispatchEvent(event);
                                break;
                            }
                            case "country":
                                let country = document.querySelector("#country");
                                country.value = component.long_name;
                                country.dispatchEvent(event);
                                if(country.value == "Canada") {
                                    state.value = "Foreign";
                                    state.dispatchEvent(event);
                                }
                                break;
                        }
                    }


                    address1Field.value = address1;
                    address1Field.dispatchEvent(event);
                    postalField.value = postcode;
                    postalField.dispatchEvent(event);
                    // After filling the form with address components from the Autocomplete
                    // prediction, set cursor focus on the second address line to encourage
                    // entry of subpremise information such as apartment, unit, or floor number.
                    address2Field.focus();
                }
            }


            address1Field = document.querySelector("#company-location");
            address2Field = document.querySelector("#company-address2");
            postalField = document.querySelector("#company-postal");
            // Create the autocomplete object, restricting the search predictions to
            // addresses in the US and Canada.
            autocomplete = new google.maps.places.Autocomplete(address1Field, {
                componentRestrictions: { country: ["us", "ca"] },
                fields: ["address_components", "geometry"],
                types: ["address"],
            });
            address1Field.focus();
            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener("place_changed", function () { fillInAddress(autocomplete) });


        }

        function DataTablesDraw() {
            $(function () {
                setTimeout(() => {
                    $("#table").DataTable().draw()
                }, 500)
            })
        }

        function DataTablesAdd(table) {
            $(function () {
                $(table).DataTable().destroy();
            })

            $(function () {
                $(table).DataTable();

            });
        }

        function DataTablesAddString() {
            $(function () {
                $("#table").DataTable().destroy();
            })

            $(function () {
                $('#table').DataTable({
                    stateSave: true
                });

                const table = $("#table").DataTable();

                setTimeout(() => {
                    table.draw()
                }, 1000)
            });
        }

        function DataTablesAddOrderbyDate(table) {

            $(function () {
                $(table).DataTable().destroy();
            })


            $(function () {
                $(table).DataTable({
                    "order": [[3, 'desc']]
                });
            });

        }

        function DataTablesRemove(table) {

            $(function () {
                $(table).DataTable().destroy();
            })

        }

        function RemoveDropdown(id) {
            let dropdown = document.getElementById(id);
            return dropdown.parentNode.removeChild(dropdown);
        }

    </script>
</body>
</html>
