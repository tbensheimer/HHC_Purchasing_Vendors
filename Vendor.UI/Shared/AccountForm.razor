
<EditForm Model="@Account" class="mb-4" OnValidSubmit="() => HandleAccountComplete()">
    <DataAnnotationsValidator />
    <ValidationSummary />

     <label class="fw-bold" for="email">Email (Username)</label>
        <InputText @bind-Value="Account.Email" class="form-control email mb-2" name="email" id="email" type="text" />

     <label for="password" class="fw-bold">Password</label>
    <InputText @bind-Value="Account.Password" class="form-control password mb-4" name="password" id="password" type="password" />

    @if (!IsEdit)
    {
        <label class="fw-bold" for="password2">Confirm Password</label>
        <input @bind="@password2" class="form-control password2 @(password2 == null ? "" : "modified") @(Account.Password == password2 ? "valid" : "invalid") mb-4" id="password2" name="password2" type="password" />

        @if (Account.Password != password2)
        {
            PasswordError = "Passwords must be same";
            PasswordMatch = false;
        }
        else
        {
            PasswordError = null;
            PasswordMatch = true;
        }

        @if (PasswordError is not null)
        {
            <div class="alert alert-danger">@PasswordError</div>
        }

    }

    @if (IsEdit)
    {
        @if (SaveAccountSuccess is not null)
        {
            <div class="alert alert-success">@SaveAccountSuccess</div>
        }

        @if (SaveAccountEror is not null)
        {
            <div class="alert alert-danger">@SaveAccountEror</div>
        }
        <button type="submit" class="btn btn-success btn-sm">Save Account Info</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary mb-3">Next</button>
        <p>Note: Once you hit next, you won't be able to go back and edit information. You can log in to your account and make necessary edits after the registration is complete.</p>

    }
</EditForm>

@code {
    [Parameter]
    public VendorAccount? Account { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public string? password2 { get; set; }

    [Parameter]
    public bool PasswordMatch { get; set; }

    [Parameter]
    public string? SaveAccountSuccess { get; set; }

    [Parameter]
    public string? SaveAccountEror { get; set; }

    private string? PasswordError { get; set; }

    public async Task HandleAccountComplete()
    {
     
            if (OnSubmit.HasDelegate)
            {
                await OnSubmit.InvokeAsync(true);
            }
     
    }

}
