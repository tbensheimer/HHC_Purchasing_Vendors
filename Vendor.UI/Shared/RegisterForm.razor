@page "/register"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<VendorDataDbContext> ContextFactory
@inject NavigationManager NavigationManager

<h3>Registration Form</h3>

@if (Company is not null && Account is not null && Address is not null && Authorized_Contact is not null)
{

    <div class="tab">
        <button @onclick="(x => DisplayTab(1))" class="@((tab1) ? "active" : "")">
            <i alt="user icon" class="fa-regular fa-building"></i><br />
            <span class="d-none d-sm-inline">Company</span>
        </button>

        <button @onclick="(x => DisplayTab(2))" class="@((tab2) ? "active" : "")">
            <i alt="building icon" class="fa-regular fa-user"></i><br />
            <span class="d-none d-sm-inline">Account</span>
        </button>

        <button @onclick="(x => DisplayTab(3))" class="@((tab3) ? "active" : "")">
            <i alt="address-book icon" class="fa-regular fa-address-book"></i><br />
            <span class="d-none d-sm-inline">Address</span>
        </button>

        <button @onclick="(x => DisplayTab(4))" class="@((tab4) ? "active" : "")">
            <i alt="address-book icon" class="fa-regular fa-address-book"></i><br />
            <span class="d-none d-sm-inline">Contacts</span>
        </button>

        <button @onclick="(x => DisplayTab(5))" class="@((tab5) ? "active" : "")">
            <i alt="briefcase-icon" class="fa-solid fa-briefcase"></i><br />
            <span class="d-none d-sm-inline">Types/Categories</span>
        </button>

        <button @onclick="(x => DisplayTab(6))" class="@((tab6) ? "active" : "")">
            <i alt="check mark icon" class="fa-solid fa-square-check"></i><br />
            <span class="d-none d-sm-inline">Finish</span>
        </button>
    </div>

    @if (tab1)
    {
        <div class="tabcontent">
            <div class="create-account-container mb-4">

                <h2 class="contacts-title fs-3 fw-bold mb-4">Company Information:</h2>
                <CompanyInfoForm Company="@Company" OnSubmit="@HandleCompanySubmit" />

            </div>
        </div>
    }
    @if (tab2)
    {
        <div class="tabcontent">
            <div class="create-account-container mb-4">

                <h2 class="contacts-title fs-3 fw-bold mb-4">Create Account:</h2>
                <AccountForm Account="@Account" password2="@password2" PasswordMatch="@PasswordMatch" OnSubmit="@HandleAccountSubmit" />

            </div>
        </div>
    }
    @if (tab3)
    {
        <div class="tabcontent">
            <div class="create-account-container mb-4">
                <h2 class="contacts-title fs-3 fw-bold mb-4">Address:</h2>

                <AddressForm Address="@Address" OnSubmit="@HandleAddressSubmit" />


            </div>
        </div>
    }

    @if (tab4)
    {
        <div class="tabcontent">
            <div class="contacts-group mb-4">

                <h2 class="contacts-title fs-3 fw-bold mb-4">Company Contacts:</h2>
                <ContactsForm Company="@Company" Authorized_Contact="@Authorized_Contact" FirstName="@FirstName"
                      LastName="@LastName" Email="@Email" Number="@Number" IsEdit="false" ContactError="@ContactError"
                      OnSubmit="@HandleContactsSubmit" />

            </div>

        </div>
    }

    @if (tab5)
    {
        <div class="tabcontent">
            <form>
                <div class="types-categories-group mb-4">

                    <h3 class="prompt fs-3 fw-bold mb-4">Select Your Company Types and Categories:</h3>
                    <p class="fw-bold">
                        Please check all types and categories that relate to your company.
                        Click next when done.
                    </p>
                    <div class="layout">
                        <div class="search-view-type">
                            <div class="input-group mb-3">
                                <label for="search" hidden>Search Type </label>
                                <input type="text" id="search" placeholder=" Search Type... "
                               @onkeyup="@FilterKeyUp" @bind-value="@FilterTypeString" class="type-search-input form-control mb-3" />
                                <button class="btn btn-sm btn-secondary" type="button" @onclick="ButtonFilterClick">Filter</button>
                            </div>


                            <div class="types mt-3">
                                <p class="types-title fs-5 fw-bold">Type</p>

                                <ul class="type-data">
                                    @if (QueryableTypes is not null)
                                    {
                                        @foreach (var type in QueryableTypes)
                                        {
                                           @* @if (type.Is_Checked)
                                            {*@
                                                <li class="typeLi mb-1">
                                                    <label id="key" for="@type.Type_Name">
                                                        <input @key="type.Id" id="@type.Type_Name" value="@type.Is_Checked" @onchange="args => HandleTypeChange(args, type.Id)" class="form-check-input type-check"
                                           Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                                    </label>
                                                    <br />
                                                </li>
                                           @* }
                                            else
                                            {
                                                <li class="typeLi mb-1">
                                                    <label id="key" for="@type.Type_Name">
                                                        <input @key="type.Id" id="@type.Type_Name" value="@type.Is_Checked" @onchange="(args) => HandleCheck(args, type.Id)" class="form-check-input type-check"
                                           Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                                    </label>
                                                    <br />
                                                </li>
                                            }*@
                                        }

                                    }
                                </ul>

                            </div>
                        </div>

                        <div class="view-search-type">
                            <div class="input-group mb-3">
                                <label for="search-cat" hidden>Search Category</label>
                                <input type="text" id="search-cat" placeholder=" Search Category... "
                               @onkeyup="@FilterKeyUp" @bind-value="@FilterCategoryString" class="category-search-input form-control mb-3" />
                                <button class="btn btn-sm btn-secondary" type="button" @onclick="ButtonFilterClick">Filter</button>
                            </div>




                            <div class="categories mt-3">

                                <p class="cat-title fs-5 fw-bold">Categories:</p>

                                <ul class="cat-data">
                                    @if (QueryableCategories is not null)
                                    {
                                        @foreach (var cat in QueryableCategories)
                                        {
                                            
                                            var type = Types.FirstOrDefault(type => type.Id == cat.Type_Id);

                                                @if (CheckedCategories.Any(checkedcat => checkedcat.Id == cat.Id))
                                                {
                                                    <li class="catLi mb-1">
                                                        <label id="key" for="@cat.Category_Name">
                                                            <input checked @key="cat.Id" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                           name="@cat.Category_Name" type="checkbox" /><strong>@type.Type_Name:</strong> @cat.Category_Name
                                                        </label>
                                                        <br />
                                                    </li>
                                                }
                                                else
                                                {
                                                    @* @if (cat.Is_Checked)
                                                {*@
                                                    <li class="catLi mb-1">
                                                        <label id="key" for="@cat.Category_Name">
                                                            <input @key="cat.Id" @onchange="(args) => HandleCategoryChange(args, cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                           name="@cat.Category_Name" type="checkbox" /><strong>@type.Type_Name:</strong> @cat.Category_Name
                                                        </label>
                                                        <br />
                                                    </li>
                                                }
                                                @*        }
                                                else
                                                {
                                                    <li class="catLi mb-1">
                                                        <label id="key" for="@cat.Category_Name">
                                                            <input @key="cat.Id" @onclick="() => HandleCategoryChange(cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                           name="@cat.Category_Name" type="checkbox" /><strong>@type.Type_Name:</strong> @cat.Category_Name
                                                        </label>
                                                        <br />
                                                    </li>
                                                }*@
                                            }
                                        
                                    }
                                </ul>

                            </div>

                        </div>

                    </div>
                    <p class="fw-bold mt-3">Contacts Selected: @CategoryCount</p>
                      <button style="align-self: flex-start;" type="button" @onclick="() => HandleTypesCatsSubmit()" class="btn btn-primary">Next</button>
                <p class="mt-3">Note: Once you hit next, you won't be able to go back and edit information. You can log in to your account and make necessary edits after the registration is complete.</p>
                    @if (ErrorMessage is not null)
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                </div>
              
            </form>
        </div>

    }

    @if (tab6)
    {
        <div class="tab-content">
            <div class="reg-complete-group mt-3 mb-4">
                <div class="text-center">
                    <h2 class="mt-0"><i alt="check mark icon" class="oi oi-check"></i></h2>

                    <h3 class="mt-0">Registration Complete!</h3>

                    <p class="w-75 mb-2 mx-auto">Thank you for registering your company.</p>
                    <p class="w-75 mb-4 mx-auto">An account was successfully created. You may log into your account whenever to update and make changes.</p>
                    <p>
                        Your company will receive notifications from us if we require your services and for updates.
                        Please note that completing this form does not gurantee that we will do business with your company.
                    </p>

                    <label classclass="mb-4" for="legal">
                    <input @onclick="() => HandleComplianceAgreement()" type="checkbox" class="form-check-input" id="legal" />
                        Please check (Compliance statement will be provided)
                    </label>
                    <br />
                    <a @onclick="() => HandleLoginClick()" class="fw-bold btn btn-success mt-3">Go to Log In Page</a>
                </div>
                @if(ErrorMessage is not null)
                {
                    <div class="alert alert-danger mt-3">@ErrorMessage</div>
                }
            </div>
        </div>
    }



}
@code {
    public Company? Company { get; set; }
    public int CompanyCount { get; set; }
    public Account? Account { get; set; }
    public Address? Address { get; set; }
    public Authorized_Contacts? Authorized_Contact { get; set; }
    public Business_Types? Type { get; set; }
    public Business_Categories? Category { get; set; }
    private DateTime SignUpDate { get; set; }
    public Company_Types_Categories? CompanyTypeAndCat { get; set; }
    public List<Company_Types_Categories>? CompanyCategories = new List<Company_Types_Categories>();

    private string? password2 { get; set; }
    private bool PasswordMatch { get; set; }

    private List<Authorized_Contacts>? Contacts = new List<Authorized_Contacts>();
    private List<Business_Types> CheckedTypes = new List<Business_Types>();
    private List<Business_Categories> CheckedCategories = new List<Business_Categories>();

    private string FirstName { get; set; } = default!;
    private string LastName { get; set; } = default!;
    private string Email { get; set; } = default!;
    private double? Number { get; set; }
    private string? ContactError { get; set; } = default!;


    public Business_Types[]? Types { get; set; }
    public Business_Types[]? QueryableTypes { get; set; }

    public Business_Categories[]? Categories { get; set; }
    public List<Business_Categories>? QueryableCategories = new List<Business_Categories>();


    private List<Authorized_Contacts>? ContactList { get; set; }
    private List<Business_Categories> FilteredCategories = new List<Business_Categories>();

    private string? FilterTypeString { get; set; }
    private string? FilterCategoryString { get; set; }
    private int? CategoryCount { get; set; }
    private string? ErrorMessage { get; set; }

    private bool ComplianceAgreement = false;


    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        Types = await context.Business_Types.OrderBy(type => type.Type_Name).ToArrayAsync();
        Categories = await context.Business_Categories.OrderBy(cat => cat.Category_Name).ToArrayAsync();
        CategoryCount = 0;

        //foreach (var type in Types)
        //{
        //    type.Is_Checked = false;
        //    context.Update(type);
        //    await context.SaveChangesAsync();
        //}

        //foreach (var cat in Categories)
        //{
        //    cat.Is_Checked = false;
        //    context.Update(cat);
        //    await context.SaveChangesAsync();
        //}

        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        Company = new();
        await LoadData();
    }

    private async Task LoadData()
    {

        Account = new();
        Address = new();
        Authorized_Contact = new Authorized_Contacts();
        Type = new();
        Category = new();
        SignUpDate = DateTime.Now;
        ContactsForm.Contacts = new();
        //CompanyTypeAndCat = new Company_Types_Categories();
        ErrorMessage = null;

        using var context = ContextFactory.CreateDbContext();
        IQueryable<Business_Types> TypeQuery = context.Business_Types;
        TypeQuery = AddTypeFilter(TypeQuery);
        QueryableTypes = await TypeQuery.OrderBy(type => type.Type_Name).ToArrayAsync();

        if (!string.IsNullOrWhiteSpace(FilterCategoryString) && QueryableCategories is not null)
        {
            QueryableCategories.Clear();
            foreach (var cat in FilteredCategories.Where(cat => cat.Category_Name != null && cat.Category_Name.ToLower().Contains(this.FilterCategoryString.ToLower())))
            {
                QueryableCategories.Add(cat);
            }
        }
        else if (string.IsNullOrWhiteSpace(FilterCategoryString) && QueryableCategories is not null)
        {
            QueryableCategories.Clear();
            foreach (var cat in FilteredCategories)
            {
                QueryableCategories.Add(cat);
            }
        }


    }


    private bool tab1 = true;
    private bool tab2 = false;
    private bool tab3 = false;
    private bool tab4 = false;
    private bool tab5 = false;
    private bool tab6 = false;


    public void DisplayTab(int TabNumber)
    {
        ErrorMessage = null;

        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = false;
                this.tab5 = false;
                this.tab6 = false;
                break;
            case 2:
                this.tab1 = false;
                this.tab2 = true;
                this.tab3 = false;
                this.tab4 = false;
                this.tab5 = false;
                this.tab6 = false;
                break;
            case 3:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = true;
                this.tab4 = false;
                this.tab5 = false;
                this.tab6 = false;
                break;
            case 4:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = true;
                this.tab5 = false;
                this.tab6 = false;
                break;
            case 5:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = false;
                this.tab5 = true;
                this.tab6 = false;
                break;
            case 6:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = false;
                this.tab5 = false;
                this.tab6 = true;
                break;
        }
    }

    private async Task HandleAccountSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleAccountComplete(2);
        }
    }

    private async Task HandleAccountComplete(int tab)
    {
        //if (PasswordMatch)
        // {
        DisplayTab(tab + 1);


        if (Account is not null && Company is not null)
        {
            using var context = ContextFactory.CreateDbContext();
            Account.CompanyId = Company.Id;
            context.Accounts.Add(Account);
            await context.SaveChangesAsync();
        }
        //  }
    }

    private async Task HandleCompanySubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleCompanyComplete(1);
        }
    }

    private async Task HandleCompanyComplete(int tab)
    {
        if (Company is not null)
        {
            using var context = ContextFactory.CreateDbContext();
            if (Company.Diversity_Certification != "Other")
            {
                Company.Other_Diversity_Certification = "";
            }
            Company.Sign_Up = SignUpDate;

            var id = Company.Fed_Id_SSN.ToString();

            //string encryptPassword = genPassword();

            //string encryptedText = EncryptText(id, encryptPassword);

            //string decryptedText = DecryptText(encryptedText, encryptPassword);


            context.Companies.Add(Company);
            await context.SaveChangesAsync();
        }
        DisplayTab(tab + 1);
    }

    //public static string genPassword()
    //{
    //    var random = new RNGCryptoServiceProvider();

    //    // Maximum length of salt
    //    int max_length = 32;

    //    // Empty salt array
    //    byte[] salt = new byte[max_length];

    //    // Build the random bytes
    //    random.GetNonZeroBytes(salt);

    //    // Return the string encoded salt
    //    return Convert.ToBase64String(salt);
    //}

    //public static string EncryptText(string input, string password)
    //{
    //    // Get the bytes of the string
    //    byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(input);
    //    // Hash the password with SHA256
    //    byte[] passwordBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password));
    //    byte[] bytesEncrypted = null;
    //    // The salt bytes must be at least 8 bytes. Private key
    //    byte[] saltBytes = new byte[] { 111, 27, 3, 11, 18, 4, 19, 27 };

    //    using (MemoryStream ms = new MemoryStream())
    //    {
    //        using (RijndaelManaged AES = new RijndaelManaged())
    //        {
    //            AES.KeySize = 256;
    //            AES.BlockSize = 128;

    //            var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
    //            AES.Key = key.GetBytes(AES.KeySize / 8);
    //            AES.IV = key.GetBytes(AES.BlockSize / 8);

    //            AES.Mode = CipherMode.CBC;

    //            using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
    //            {
    //                cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
    //                cs.Close();
    //            }
    //            bytesEncrypted = ms.ToArray();
    //        }
    //    }

    //    return Convert.ToBase64String(bytesEncrypted);
    //}


    //public static string DecryptText(string input, string password)
    //{
    //    // Get the bytes of the string
    //    byte[] bytesToBeDecrypted = Convert.FromBase64String(input);
    //    byte[] passwordBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(password));
    //    byte[] bytesDecrypted = null;
    //    // The salt bytes must be at least 8 bytes. Private key.
    //    byte[] saltBytes = new byte[] { 111, 27, 3, 11, 18, 4, 19, 27 };

    //    using (MemoryStream ms = new MemoryStream())
    //    {
    //        using (RijndaelManaged AES = new RijndaelManaged())
    //        {
    //            AES.KeySize = 256;
    //            AES.BlockSize = 128;

    //            var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
    //            AES.Key = key.GetBytes(AES.KeySize / 8);
    //            AES.IV = key.GetBytes(AES.BlockSize / 8);
    //            AES.Mode = CipherMode.CBC;

    //            using (var cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))
    //            {
    //                cs.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
    //                cs.Close();
    //            }
    //            bytesDecrypted = ms.ToArray();
    //        }
    //    }

    //    return Encoding.UTF8.GetString(bytesDecrypted);
    //}

    private async Task HandleAddressSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleAddressComplete(3);
        }
    }

    private async Task HandleAddressComplete(int tab)
    {
        if (Address is not null && Company is not null)
        {
            using var context = ContextFactory.CreateDbContext();
            Address.CompanyId = Company.Id;
            context.Addresses.Add(Address);
            await context.SaveChangesAsync();
            DisplayTab(tab + 1);

        }
    }


    private async Task HandleContactsSubmit(bool isValid)
    {
        if (isValid)
        {

            await HandleContactsComplete(4);
        }
        else
        {
            await LoadData();
        }
    }

    private async Task HandleContactsComplete(int tab)
    {
        if (Authorized_Contact is not null && Company is not null)
        {
            ContactError = null;

            if (ContactsForm.Contacts is not null)
            {
                using var context = ContextFactory.CreateDbContext();
                Authorized_Contact.CompanyId = Company.Id;
                context.Authorized_Contacts.AddRange(ContactsForm.Contacts);

                await context.SaveChangesAsync();

                DisplayTab(tab + 1);
            }
        }
    }


    private void HandleNextClick(int tab)
    {

        DisplayTab(tab + 1);
    }

    private async Task HandleTypeChange(ChangeEventArgs args, int TypeId)
    {
        //using var context = ContextFactory.CreateDbContext();
        //Type = await context.Business_Types.FirstOrDefaultAsync(type => type.Id == TypeId);
        //Type.Is_Checked = !Type.Is_Checked;
        //context.Update(Type);
        //await context.SaveChangesAsync();

        bool IsSelected = (bool)args.Value;
        // using var context = ContextFactory.CreateDbContext();
        Type = Types.FirstOrDefault(type => type.Id == TypeId);

        if (IsSelected)
        {
            if (Type is not null && !CheckedTypes.Any(type => type.Id == TypeId))
            {
                CheckedTypes.Add(Type);
            }
        }

        if (!IsSelected)
        {
            if (Type is not null)
            {
                CheckedTypes.RemoveAll(type => type.Id == TypeId);
            }
        }

      await LoadCategories();
      //  LoadData();
    }

    private async Task LoadCategories()
    {
        //   using var context = ContextFactory.CreateDbContext();

        FilteredCategories.Clear();

        foreach (var type in CheckedTypes)
        {
            var CatList = Categories.Where(cat => cat.Type_Id == type.Id);

            foreach (var cat in CatList)
            {
                if (!FilteredCategories.Any(filter => filter.Id == cat.Id))
                {
                    FilteredCategories.Add(cat);
                }
            }

        }
        await LoadData();
    }

    private void HandleCategoryChange(ChangeEventArgs args,int CatId)
    {

        bool IsSelected = (bool)args.Value;
     //   using var context = ContextFactory.CreateDbContext();
        Category = Categories.FirstOrDefault(cat => cat.Id == CatId);
        //Category.Is_Checked = !Category.Is_Checked;
        //context.Update(Category);
        //await context.SaveChangesAsync();

        if (IsSelected)
        {
            if (Category is not null && !CheckedCategories.Any(check => check.Id == CatId))
            {
                ErrorMessage = null;
                CheckedCategories.Add(Category);
            }
        }

        if (!IsSelected)
        {
                CheckedCategories.RemoveAll(cat => cat.Id == CatId);
        }

        CategoryCount = CheckedCategories.Count();

       // await LoadCategories();
       // await LoadData();
    }

    private async Task HandleTypesCatsSubmit()
    {
                    using var context = ContextFactory.CreateDbContext();

        if (CategoryCount == 0)
        {
            ErrorMessage = "No Contacts selected. Please select a contact.";
            return;
        }

        foreach (var cat in CheckedCategories)
        {

            if (Company is not null)
            {
                CompanyTypeAndCat = new Company_Types_Categories();
                CompanyTypeAndCat.CompanyId = Company.Id;
                CompanyTypeAndCat.Category_Id = cat.Id;
                CompanyTypeAndCat.Type_Id = cat.Type_Id;
                if (CompanyCategories is not null)
                {
                    CompanyCategories.Add(CompanyTypeAndCat);
                }
            }
        }

        if (CompanyCategories is not null)
        {
            context.Company_Types_Categories.AddRange(CompanyCategories);
            await context.SaveChangesAsync();

            DisplayTab(6);
        }
    }



    private async Task FilterKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadData();
        }
    }

    private async Task ButtonFilterClick()
    {
        await LoadData();
    }

    private IQueryable<Business_Types> AddTypeFilter(IQueryable<Business_Types> TypeQuery)
    {
        if (!string.IsNullOrWhiteSpace(FilterTypeString))
        {
            return TypeQuery.Where(type => type.Type_Name != null && type.Type_Name.Contains(this.FilterTypeString));
        }
        return TypeQuery;
    }

    private IQueryable<Business_Categories> AddCategoryFilter(IQueryable<Business_Categories> CatQuery)
    {
        if (!string.IsNullOrWhiteSpace(FilterCategoryString))
        {
            return CatQuery.Where(cat => cat.Category_Name != null && cat.Category_Name.Contains(this.FilterCategoryString));
        }
        return CatQuery;
    }

    private void HandleComplianceAgreement()
    {
        ComplianceAgreement = !ComplianceAgreement;
    }

    private void HandleLoginClick()
    {
        if(!ComplianceAgreement)
        {
            ErrorMessage = "Please read the compliance statement and check if you understand and agree to the statement.";
            return;
        }

        if(ComplianceAgreement)
        {
            ErrorMessage = null;
            NavigationManager.NavigateTo("/login");
        }
    }

}

