@inject IDbContextFactory<VendorDataDbContext> ContextFactory
<form>
    <div class="types-categories-group mb-4">

        <h3 class="prompt fs-3 fw-bold mb-4">Select Your Company Types and Categories:</h3>
        <p class="fw-bold">
            Please check all types and categories that relate to your company.
            Hit next when done.
        </p>
        <div class="layout">
            <div class="search-view-type">
                <label for="search" hidden>Search Type </label>
                <input type="text" id="search" placeholder=" Search Type... "
                       class="type-search-input form-control mb-3" />

                <div class="types mt-3">
                    <p class="types-title fs-5 fw-bold">Type</p>

                    <ul class="type-data">
                        @if (Types is not null)
                        {
                            @foreach (var type in Types)
                            {

                                <li class="typeLi">
                                    <label id="key" for="@type.Type_Name">
                                        <input id="@type.Type_Name" value="@type.Is_Checked" @onclick="() => HandleTypeChange(type.Id)" class="form-check-input type-check"
                                       Name="TypeCheckbox" type="checkbox" /> @type.Type_Name
                                    </label>
                                    <br />
                                </li>

                            }

                        }
                    </ul>

                </div>
            </div>

            <div class="view-search-type">
                <label for="search-cat" hidden>Search Category</label>
                <input id="search-cat" placeholder=" Search Category..."
                       class="category-search-input form-control mb-3" />

                <div class="categories mt-3">

                    <p class="cat-title fs-5 fw-bold">Categories:</p>

                    <ul class="cat-data">
                        @if (FilteredCategories is not null)
                        {
                            @foreach (var cat in FilteredCategories)
                            {

                                <li class="catLi">
                                    <label id="key" for="@cat.Category_Name">
                                        <input @onclick="() => HandleCategoryChange(cat.Id)" class="form-check-input cat-check" id="@cat.Category_Name"
                                       name="@cat.Category_Name" type="checkbox" /> @cat.Category_Name
                                    </label>
                                    <br />
                                </li>
                            }
                        }
                    </ul>

                </div>

            </div>

        </div>

    </div>
    <button type="button" @onclick="() => HandleTypesCatsSubmit()" class="btn btn-primary">Next</button>
</form>


@code {
    [Parameter]
    public Company? Company { get; set; }
       [Parameter]
    public Business_Types[]? Types { get; set; }
       [Parameter]
    public Business_Categories[]? Categories { get; set; }

     public Business_Types? Type { get; set; }
    public Business_Categories? Category { get; set; }
    public List<Business_Categories> FilteredCategories = new List<Business_Categories>();
     public Company_Types_Categories? CompanyTypeAndCat { get; set; }
    public List<Company_Types_Categories>? CompanyCategories = new List<Company_Types_Categories>();
    private List<Business_Types> CheckedTypes = new List<Business_Types>();
    private List<Business_Categories> CheckedCategories = new List<Business_Categories>();




     private async Task HandleTypeChange(int TypeId)
    {
        using var context = ContextFactory.CreateDbContext();
        Type = await context.Business_Types.FirstOrDefaultAsync(type => type.Id == TypeId);
        Type.Is_Checked = !Type.Is_Checked;
        context.Update(Type);
        await context.SaveChangesAsync();

        if (Type.Is_Checked)
        { 
            if (Type is not null)
            {
                CheckedTypes.Add(Type);
            }
        }

        if (!Type.Is_Checked)
        {
            if (Type is not null)
            {
                CheckedTypes.RemoveAll(type => type.Id == TypeId);
            }
        }

        await LoadCategories();

    }

    private async Task LoadCategories()
    {
        using var context = ContextFactory.CreateDbContext();

        FilteredCategories.Clear();

        foreach(var type in CheckedTypes)
        {
            var CatList = await context.Business_Categories.ToArrayAsync();

            foreach(var cat in CatList)
            {
                if(cat.Type_Id == type.Id && type.Is_Checked)
                {
                    FilteredCategories.Add(cat);
                }
            }

        }
    }

    private async Task HandleCategoryChange(int CatId)
    {
        using var context = ContextFactory.CreateDbContext();
        Category = await context.Business_Categories.FirstOrDefaultAsync(cat => cat.Id == CatId);
        Category.Is_Checked = !Category.Is_Checked;
        context.Update(Category);
        await context.SaveChangesAsync();

        if (Category.Is_Checked)
        {
            if (Category is not null)
            {
                CheckedCategories.Add(Category);
            }
        }

        if (!Category.Is_Checked)
        {
            if (Category is not null)
            {
                CheckedCategories.RemoveAll(cat => cat.Id == CatId);
            }
        }
        await LoadCategories();
    }

    private async Task HandleTypesCatsSubmit()
    {

        foreach (var cat in CheckedCategories)
        {
            using var context = ContextFactory.CreateDbContext();

            if (Company is not null)
            {

                CompanyTypeAndCat = new Company_Types_Categories();
                CompanyTypeAndCat.CompanyId = Company.Id;
                CompanyTypeAndCat.Category_Id = cat.Id;
                if (CompanyCategories is not null)
                {
                    CompanyCategories.Add(CompanyTypeAndCat);
                }

            }

        }

        if(CompanyCategories is not null)
        {
            using var context = ContextFactory.CreateDbContext();

            context.Company_Types_Categories.AddRange(CompanyCategories);
            await context.SaveChangesAsync();

           // DisplayTab(6);
        }
    }
        

}

}
